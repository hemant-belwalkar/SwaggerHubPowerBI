# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CacheRefreshPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'owner': 'str',
        'description': 'str',
        'catalog_item_path': 'str',
        'event_type': 'str',
        'schedule': 'ScheduleReference',
        'last_run_time': 'datetime',
        'last_status': 'str',
        'modified_by': 'str',
        'modified_date': 'datetime',
        'parameter_values': 'list[ParameterValue]'
    }

    attribute_map = {
        'id': 'Id',
        'owner': 'Owner',
        'description': 'Description',
        'catalog_item_path': 'CatalogItemPath',
        'event_type': 'EventType',
        'schedule': 'Schedule',
        'last_run_time': 'LastRunTime',
        'last_status': 'LastStatus',
        'modified_by': 'ModifiedBy',
        'modified_date': 'ModifiedDate',
        'parameter_values': 'ParameterValues'
    }

    def __init__(self, id=None, owner=None, description=None, catalog_item_path=None, event_type=None, schedule=None, last_run_time=None, last_status=None, modified_by=None, modified_date=None, parameter_values=None, _configuration=None):  # noqa: E501
        """CacheRefreshPlan - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._owner = None
        self._description = None
        self._catalog_item_path = None
        self._event_type = None
        self._schedule = None
        self._last_run_time = None
        self._last_status = None
        self._modified_by = None
        self._modified_date = None
        self._parameter_values = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if owner is not None:
            self.owner = owner
        if description is not None:
            self.description = description
        if catalog_item_path is not None:
            self.catalog_item_path = catalog_item_path
        if event_type is not None:
            self.event_type = event_type
        if schedule is not None:
            self.schedule = schedule
        if last_run_time is not None:
            self.last_run_time = last_run_time
        if last_status is not None:
            self.last_status = last_status
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_date is not None:
            self.modified_date = modified_date
        if parameter_values is not None:
            self.parameter_values = parameter_values

    @property
    def id(self):
        """Gets the id of this CacheRefreshPlan.  # noqa: E501

        A unique UUID value that specifies the identifier by which this CacheRefreshPlan can be referenced in the definition of other items.  # noqa: E501

        :return: The id of this CacheRefreshPlan.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CacheRefreshPlan.

        A unique UUID value that specifies the identifier by which this CacheRefreshPlan can be referenced in the definition of other items.  # noqa: E501

        :param id: The id of this CacheRefreshPlan.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def owner(self):
        """Gets the owner of this CacheRefreshPlan.  # noqa: E501

        A string value that specifies the owner of the CacheRefreshPlan.  # noqa: E501

        :return: The owner of this CacheRefreshPlan.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CacheRefreshPlan.

        A string value that specifies the owner of the CacheRefreshPlan.  # noqa: E501

        :param owner: The owner of this CacheRefreshPlan.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def description(self):
        """Gets the description of this CacheRefreshPlan.  # noqa: E501

        A string value that contains descriptive text about the CacheRefreshPlan.  # noqa: E501

        :return: The description of this CacheRefreshPlan.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CacheRefreshPlan.

        A string value that contains descriptive text about the CacheRefreshPlan.  # noqa: E501

        :param description: The description of this CacheRefreshPlan.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def catalog_item_path(self):
        """Gets the catalog_item_path of this CacheRefreshPlan.  # noqa: E501

        A string value that contains the fully qualified URL path location of the CatalogItem that represents the CacheRefreshPlan.  # noqa: E501

        :return: The catalog_item_path of this CacheRefreshPlan.  # noqa: E501
        :rtype: str
        """
        return self._catalog_item_path

    @catalog_item_path.setter
    def catalog_item_path(self, catalog_item_path):
        """Sets the catalog_item_path of this CacheRefreshPlan.

        A string value that contains the fully qualified URL path location of the CatalogItem that represents the CacheRefreshPlan.  # noqa: E501

        :param catalog_item_path: The catalog_item_path of this CacheRefreshPlan.  # noqa: E501
        :type: str
        """

        self._catalog_item_path = catalog_item_path

    @property
    def event_type(self):
        """Gets the event_type of this CacheRefreshPlan.  # noqa: E501

        A string value that specifies which EventType to use for logging.  # noqa: E501

        :return: The event_type of this CacheRefreshPlan.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this CacheRefreshPlan.

        A string value that specifies which EventType to use for logging.  # noqa: E501

        :param event_type: The event_type of this CacheRefreshPlan.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def schedule(self):
        """Gets the schedule of this CacheRefreshPlan.  # noqa: E501


        :return: The schedule of this CacheRefreshPlan.  # noqa: E501
        :rtype: ScheduleReference
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this CacheRefreshPlan.


        :param schedule: The schedule of this CacheRefreshPlan.  # noqa: E501
        :type: ScheduleReference
        """

        self._schedule = schedule

    @property
    def last_run_time(self):
        """Gets the last_run_time of this CacheRefreshPlan.  # noqa: E501

        A date-time value that specifies the date-time of the last run of the CacheRefreshPlan.  # noqa: E501

        :return: The last_run_time of this CacheRefreshPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._last_run_time

    @last_run_time.setter
    def last_run_time(self, last_run_time):
        """Sets the last_run_time of this CacheRefreshPlan.

        A date-time value that specifies the date-time of the last run of the CacheRefreshPlan.  # noqa: E501

        :param last_run_time: The last_run_time of this CacheRefreshPlan.  # noqa: E501
        :type: datetime
        """

        self._last_run_time = last_run_time

    @property
    def last_status(self):
        """Gets the last_status of this CacheRefreshPlan.  # noqa: E501

        A string value that contains the network username of the last user to modify the CacheRefreshPlan.  # noqa: E501

        :return: The last_status of this CacheRefreshPlan.  # noqa: E501
        :rtype: str
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):
        """Sets the last_status of this CacheRefreshPlan.

        A string value that contains the network username of the last user to modify the CacheRefreshPlan.  # noqa: E501

        :param last_status: The last_status of this CacheRefreshPlan.  # noqa: E501
        :type: str
        """

        self._last_status = last_status

    @property
    def modified_by(self):
        """Gets the modified_by of this CacheRefreshPlan.  # noqa: E501

        A string value that contains the network user name of the last user to modify the CacheRefreshPlan  # noqa: E501

        :return: The modified_by of this CacheRefreshPlan.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this CacheRefreshPlan.

        A string value that contains the network user name of the last user to modify the CacheRefreshPlan  # noqa: E501

        :param modified_by: The modified_by of this CacheRefreshPlan.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def modified_date(self):
        """Gets the modified_date of this CacheRefreshPlan.  # noqa: E501

        A string value that contains the date-time of the last modification to the CacheRefreshPlan.  # noqa: E501

        :return: The modified_date of this CacheRefreshPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CacheRefreshPlan.

        A string value that contains the date-time of the last modification to the CacheRefreshPlan.  # noqa: E501

        :param modified_date: The modified_date of this CacheRefreshPlan.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def parameter_values(self):
        """Gets the parameter_values of this CacheRefreshPlan.  # noqa: E501

        An array of parameter values for the CacheRefreshPlan. All parameters without a default value MUST have a value specified.  # noqa: E501

        :return: The parameter_values of this CacheRefreshPlan.  # noqa: E501
        :rtype: list[ParameterValue]
        """
        return self._parameter_values

    @parameter_values.setter
    def parameter_values(self, parameter_values):
        """Sets the parameter_values of this CacheRefreshPlan.

        An array of parameter values for the CacheRefreshPlan. All parameters without a default value MUST have a value specified.  # noqa: E501

        :param parameter_values: The parameter_values of this CacheRefreshPlan.  # noqa: E501
        :type: list[ParameterValue]
        """

        self._parameter_values = parameter_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CacheRefreshPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CacheRefreshPlan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CacheRefreshPlan):
            return True

        return self.to_dict() != other.to_dict()
