# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ReportParameterDefinitionPatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'default_values': 'list[str]',
        'prompt': 'str',
        'parameter_visibility': 'ReportParameterVisibility'
    }

    attribute_map = {
        'name': 'Name',
        'default_values': 'DefaultValues',
        'prompt': 'Prompt',
        'parameter_visibility': 'ParameterVisibility'
    }

    def __init__(self, name=None, default_values=None, prompt=None, parameter_visibility=None, _configuration=None):  # noqa: E501
        """ReportParameterDefinitionPatch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._default_values = None
        self._prompt = None
        self._parameter_visibility = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if default_values is not None:
            self.default_values = default_values
        if prompt is not None:
            self.prompt = prompt
        if parameter_visibility is not None:
            self.parameter_visibility = parameter_visibility

    @property
    def name(self):
        """Gets the name of this ReportParameterDefinitionPatch.  # noqa: E501

        A string value that specifies the name of the ReportParameter.  # noqa: E501

        :return: The name of this ReportParameterDefinitionPatch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportParameterDefinitionPatch.

        A string value that specifies the name of the ReportParameter.  # noqa: E501

        :param name: The name of this ReportParameterDefinitionPatch.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def default_values(self):
        """Gets the default_values of this ReportParameterDefinitionPatch.  # noqa: E501

        Array of default values  # noqa: E501

        :return: The default_values of this ReportParameterDefinitionPatch.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_values

    @default_values.setter
    def default_values(self, default_values):
        """Sets the default_values of this ReportParameterDefinitionPatch.

        Array of default values  # noqa: E501

        :param default_values: The default_values of this ReportParameterDefinitionPatch.  # noqa: E501
        :type: list[str]
        """

        self._default_values = default_values

    @property
    def prompt(self):
        """Gets the prompt of this ReportParameterDefinitionPatch.  # noqa: E501

        A string value that specifies text used to prompt a user for the value of the ReportParameter.  # noqa: E501

        :return: The prompt of this ReportParameterDefinitionPatch.  # noqa: E501
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this ReportParameterDefinitionPatch.

        A string value that specifies text used to prompt a user for the value of the ReportParameter.  # noqa: E501

        :param prompt: The prompt of this ReportParameterDefinitionPatch.  # noqa: E501
        :type: str
        """

        self._prompt = prompt

    @property
    def parameter_visibility(self):
        """Gets the parameter_visibility of this ReportParameterDefinitionPatch.  # noqa: E501


        :return: The parameter_visibility of this ReportParameterDefinitionPatch.  # noqa: E501
        :rtype: ReportParameterVisibility
        """
        return self._parameter_visibility

    @parameter_visibility.setter
    def parameter_visibility(self, parameter_visibility):
        """Sets the parameter_visibility of this ReportParameterDefinitionPatch.


        :param parameter_visibility: The parameter_visibility of this ReportParameterDefinitionPatch.  # noqa: E501
        :type: ReportParameterVisibility
        """

        self._parameter_visibility = parameter_visibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportParameterDefinitionPatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportParameterDefinitionPatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportParameterDefinitionPatch):
            return True

        return self.to_dict() != other.to_dict()
