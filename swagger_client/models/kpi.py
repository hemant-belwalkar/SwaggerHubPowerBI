# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Kpi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value_format': 'KpiValueFormat',
        'visualization': 'KpiVisualization',
        'drillthrough_target': 'DrillthroughTarget',
        'currency': 'str',
        'values': 'KpiValues',
        'data': 'KpiData'
    }

    attribute_map = {
        'value_format': 'ValueFormat',
        'visualization': 'Visualization',
        'drillthrough_target': 'DrillthroughTarget',
        'currency': 'Currency',
        'values': 'Values',
        'data': 'Data'
    }

    def __init__(self, value_format=None, visualization=None, drillthrough_target=None, currency=None, values=None, data=None, _configuration=None):  # noqa: E501
        """Kpi - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._value_format = None
        self._visualization = None
        self._drillthrough_target = None
        self._currency = None
        self._values = None
        self._data = None
        self.discriminator = None

        if value_format is not None:
            self.value_format = value_format
        if visualization is not None:
            self.visualization = visualization
        if drillthrough_target is not None:
            self.drillthrough_target = drillthrough_target
        if currency is not None:
            self.currency = currency
        if values is not None:
            self.values = values
        if data is not None:
            self.data = data

    @property
    def value_format(self):
        """Gets the value_format of this Kpi.  # noqa: E501


        :return: The value_format of this Kpi.  # noqa: E501
        :rtype: KpiValueFormat
        """
        return self._value_format

    @value_format.setter
    def value_format(self, value_format):
        """Sets the value_format of this Kpi.


        :param value_format: The value_format of this Kpi.  # noqa: E501
        :type: KpiValueFormat
        """

        self._value_format = value_format

    @property
    def visualization(self):
        """Gets the visualization of this Kpi.  # noqa: E501


        :return: The visualization of this Kpi.  # noqa: E501
        :rtype: KpiVisualization
        """
        return self._visualization

    @visualization.setter
    def visualization(self, visualization):
        """Sets the visualization of this Kpi.


        :param visualization: The visualization of this Kpi.  # noqa: E501
        :type: KpiVisualization
        """

        self._visualization = visualization

    @property
    def drillthrough_target(self):
        """Gets the drillthrough_target of this Kpi.  # noqa: E501


        :return: The drillthrough_target of this Kpi.  # noqa: E501
        :rtype: DrillthroughTarget
        """
        return self._drillthrough_target

    @drillthrough_target.setter
    def drillthrough_target(self, drillthrough_target):
        """Sets the drillthrough_target of this Kpi.


        :param drillthrough_target: The drillthrough_target of this Kpi.  # noqa: E501
        :type: DrillthroughTarget
        """

        self._drillthrough_target = drillthrough_target

    @property
    def currency(self):
        """Gets the currency of this Kpi.  # noqa: E501

        A string value that specifies the currency. Must follow the ISO 4217 Currency codes standard.  # noqa: E501

        :return: The currency of this Kpi.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Kpi.

        A string value that specifies the currency. Must follow the ISO 4217 Currency codes standard.  # noqa: E501

        :param currency: The currency of this Kpi.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def values(self):
        """Gets the values of this Kpi.  # noqa: E501


        :return: The values of this Kpi.  # noqa: E501
        :rtype: KpiValues
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Kpi.


        :param values: The values of this Kpi.  # noqa: E501
        :type: KpiValues
        """

        self._values = values

    @property
    def data(self):
        """Gets the data of this Kpi.  # noqa: E501


        :return: The data of this Kpi.  # noqa: E501
        :rtype: KpiData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Kpi.


        :param data: The data of this Kpi.  # noqa: E501
        :type: KpiData
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Kpi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Kpi):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Kpi):
            return True

        return self.to_dict() != other.to_dict()
