# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SystemInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_server_absolute_url': 'str',
        'report_server_relative_url': 'str',
        'web_portal_relative_url': 'str',
        'product_name': 'str',
        'product_version': 'str',
        'product_type': 'str',
        'time_zone': 'str'
    }

    attribute_map = {
        'report_server_absolute_url': 'ReportServerAbsoluteUrl',
        'report_server_relative_url': 'ReportServerRelativeUrl',
        'web_portal_relative_url': 'WebPortalRelativeUrl',
        'product_name': 'ProductName',
        'product_version': 'ProductVersion',
        'product_type': 'ProductType',
        'time_zone': 'TimeZone'
    }

    def __init__(self, report_server_absolute_url=None, report_server_relative_url=None, web_portal_relative_url=None, product_name=None, product_version=None, product_type=None, time_zone=None, _configuration=None):  # noqa: E501
        """SystemInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._report_server_absolute_url = None
        self._report_server_relative_url = None
        self._web_portal_relative_url = None
        self._product_name = None
        self._product_version = None
        self._product_type = None
        self._time_zone = None
        self.discriminator = None

        if report_server_absolute_url is not None:
            self.report_server_absolute_url = report_server_absolute_url
        if report_server_relative_url is not None:
            self.report_server_relative_url = report_server_relative_url
        if web_portal_relative_url is not None:
            self.web_portal_relative_url = web_portal_relative_url
        if product_name is not None:
            self.product_name = product_name
        if product_version is not None:
            self.product_version = product_version
        if product_type is not None:
            self.product_type = product_type
        if time_zone is not None:
            self.time_zone = time_zone

    @property
    def report_server_absolute_url(self):
        """Gets the report_server_absolute_url of this SystemInfo.  # noqa: E501

        A string value that specifies the URL for the Report Server.  # noqa: E501

        :return: The report_server_absolute_url of this SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._report_server_absolute_url

    @report_server_absolute_url.setter
    def report_server_absolute_url(self, report_server_absolute_url):
        """Sets the report_server_absolute_url of this SystemInfo.

        A string value that specifies the URL for the Report Server.  # noqa: E501

        :param report_server_absolute_url: The report_server_absolute_url of this SystemInfo.  # noqa: E501
        :type: str
        """

        self._report_server_absolute_url = report_server_absolute_url

    @property
    def report_server_relative_url(self):
        """Gets the report_server_relative_url of this SystemInfo.  # noqa: E501

        A string value that specifies the Report Server Virtual Directory.  # noqa: E501

        :return: The report_server_relative_url of this SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._report_server_relative_url

    @report_server_relative_url.setter
    def report_server_relative_url(self, report_server_relative_url):
        """Sets the report_server_relative_url of this SystemInfo.

        A string value that specifies the Report Server Virtual Directory.  # noqa: E501

        :param report_server_relative_url: The report_server_relative_url of this SystemInfo.  # noqa: E501
        :type: str
        """

        self._report_server_relative_url = report_server_relative_url

    @property
    def web_portal_relative_url(self):
        """Gets the web_portal_relative_url of this SystemInfo.  # noqa: E501

        A string value that specifies the URL for the Report Server web portal.  # noqa: E501

        :return: The web_portal_relative_url of this SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._web_portal_relative_url

    @web_portal_relative_url.setter
    def web_portal_relative_url(self, web_portal_relative_url):
        """Sets the web_portal_relative_url of this SystemInfo.

        A string value that specifies the URL for the Report Server web portal.  # noqa: E501

        :param web_portal_relative_url: The web_portal_relative_url of this SystemInfo.  # noqa: E501
        :type: str
        """

        self._web_portal_relative_url = web_portal_relative_url

    @property
    def product_name(self):
        """Gets the product_name of this SystemInfo.  # noqa: E501

        A string value that specifies the name of the product being used.  # noqa: E501

        :return: The product_name of this SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this SystemInfo.

        A string value that specifies the name of the product being used.  # noqa: E501

        :param product_name: The product_name of this SystemInfo.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_version(self):
        """Gets the product_version of this SystemInfo.  # noqa: E501

        A string value that specifies the version of the product being used.  # noqa: E501

        :return: The product_version of this SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._product_version

    @product_version.setter
    def product_version(self, product_version):
        """Sets the product_version of this SystemInfo.

        A string value that specifies the version of the product being used.  # noqa: E501

        :param product_version: The product_version of this SystemInfo.  # noqa: E501
        :type: str
        """

        self._product_version = product_version

    @property
    def product_type(self):
        """Gets the product_type of this SystemInfo.  # noqa: E501

        A string value that specifies the type of the product being used.  # noqa: E501

        :return: The product_type of this SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this SystemInfo.

        A string value that specifies the type of the product being used.  # noqa: E501

        :param product_type: The product_type of this SystemInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["PowerBiReportServer", "SqlServerReportingServices"]  # noqa: E501
        if (self._configuration.client_side_validation and
                product_type not in allowed_values):
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"  # noqa: E501
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def time_zone(self):
        """Gets the time_zone of this SystemInfo.  # noqa: E501

        A string value that specifies the timezone being used by the server.  # noqa: E501

        :return: The time_zone of this SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this SystemInfo.

        A string value that specifies the timezone being used by the server.  # noqa: E501

        :param time_zone: The time_zone of this SystemInfo.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemInfo):
            return True

        return self.to_dict() != other.to_dict()
