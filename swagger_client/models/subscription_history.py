# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SubscriptionHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'subscription_id': 'str',
        'type': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'subscription_status': 'str',
        'message': 'str',
        'details': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'subscription_id': 'SubscriptionID',
        'type': 'Type',
        'start_time': 'StartTime',
        'end_time': 'EndTime',
        'subscription_status': 'SubscriptionStatus',
        'message': 'Message',
        'details': 'Details'
    }

    def __init__(self, id=None, subscription_id=None, type=None, start_time=None, end_time=None, subscription_status=None, message=None, details=None, _configuration=None):  # noqa: E501
        """SubscriptionHistory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._subscription_id = None
        self._type = None
        self._start_time = None
        self._end_time = None
        self._subscription_status = None
        self._message = None
        self._details = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if type is not None:
            self.type = type
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if subscription_status is not None:
            self.subscription_status = subscription_status
        if message is not None:
            self.message = message
        if details is not None:
            self.details = details

    @property
    def id(self):
        """Gets the id of this SubscriptionHistory.  # noqa: E501

        A unique identifier by which this Subscription History record can be referenced in requests or in other defined objects.  # noqa: E501

        :return: The id of this SubscriptionHistory.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionHistory.

        A unique identifier by which this Subscription History record can be referenced in requests or in other defined objects.  # noqa: E501

        :param id: The id of this SubscriptionHistory.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionHistory.  # noqa: E501

        A unique UUID value that identifies the Subscription that this record is associated with.  # noqa: E501

        :return: The subscription_id of this SubscriptionHistory.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionHistory.

        A unique UUID value that identifies the Subscription that this record is associated with.  # noqa: E501

        :param subscription_id: The subscription_id of this SubscriptionHistory.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def type(self):
        """Gets the type of this SubscriptionHistory.  # noqa: E501

        A string value that specifies the type of subscription execution.  # noqa: E501

        :return: The type of this SubscriptionHistory.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubscriptionHistory.

        A string value that specifies the type of subscription execution.  # noqa: E501

        :param type: The type of this SubscriptionHistory.  # noqa: E501
        :type: str
        """
        allowed_values = ["Scheduled", "OnDemand"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def start_time(self):
        """Gets the start_time of this SubscriptionHistory.  # noqa: E501

        A string that contains the date-time for when the subscription execution started.  # noqa: E501

        :return: The start_time of this SubscriptionHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SubscriptionHistory.

        A string that contains the date-time for when the subscription execution started.  # noqa: E501

        :param start_time: The start_time of this SubscriptionHistory.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this SubscriptionHistory.  # noqa: E501

        A string that contains the date-time for when the subscription execution ended.  # noqa: E501

        :return: The end_time of this SubscriptionHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SubscriptionHistory.

        A string that contains the date-time for when the subscription execution ended.  # noqa: E501

        :param end_time: The end_time of this SubscriptionHistory.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def subscription_status(self):
        """Gets the subscription_status of this SubscriptionHistory.  # noqa: E501

        A string value that represents the status of the subscription execution.  # noqa: E501

        :return: The subscription_status of this SubscriptionHistory.  # noqa: E501
        :rtype: str
        """
        return self._subscription_status

    @subscription_status.setter
    def subscription_status(self, subscription_status):
        """Sets the subscription_status of this SubscriptionHistory.

        A string value that represents the status of the subscription execution.  # noqa: E501

        :param subscription_status: The subscription_status of this SubscriptionHistory.  # noqa: E501
        :type: str
        """
        allowed_values = ["Completed", "InProgress", "Failed"]  # noqa: E501
        if (self._configuration.client_side_validation and
                subscription_status not in allowed_values):
            raise ValueError(
                "Invalid value for `subscription_status` ({0}), must be one of {1}"  # noqa: E501
                .format(subscription_status, allowed_values)
            )

        self._subscription_status = subscription_status

    @property
    def message(self):
        """Gets the message of this SubscriptionHistory.  # noqa: E501

        A string value that contains message that describes the status of the subscription execution.  # noqa: E501

        :return: The message of this SubscriptionHistory.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SubscriptionHistory.

        A string value that contains message that describes the status of the subscription execution.  # noqa: E501

        :param message: The message of this SubscriptionHistory.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def details(self):
        """Gets the details of this SubscriptionHistory.  # noqa: E501

        A JSON string value that contains the session information and error details when a subscription execution fails.  # noqa: E501

        :return: The details of this SubscriptionHistory.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this SubscriptionHistory.

        A JSON string value that contains the session information and error details when a subscription execution fails.  # noqa: E501

        :param details: The details of this SubscriptionHistory.  # noqa: E501
        :type: str
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionHistory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionHistory):
            return True

        return self.to_dict() != other.to_dict()
