# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OdataErrorMain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'message': 'str',
        'target': 'str',
        'details': 'list[OdataErrorDetail]',
        'innererror': 'object'
    }

    attribute_map = {
        'code': 'code',
        'message': 'message',
        'target': 'target',
        'details': 'details',
        'innererror': 'innererror'
    }

    def __init__(self, code=None, message=None, target=None, details=None, innererror=None, _configuration=None):  # noqa: E501
        """OdataErrorMain - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._code = None
        self._message = None
        self._target = None
        self._details = None
        self._innererror = None
        self.discriminator = None

        self.code = code
        self.message = message
        if target is not None:
            self.target = target
        if details is not None:
            self.details = details
        if innererror is not None:
            self.innererror = innererror

    @property
    def code(self):
        """Gets the code of this OdataErrorMain.  # noqa: E501


        :return: The code of this OdataErrorMain.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OdataErrorMain.


        :param code: The code of this OdataErrorMain.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def message(self):
        """Gets the message of this OdataErrorMain.  # noqa: E501


        :return: The message of this OdataErrorMain.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OdataErrorMain.


        :param message: The message of this OdataErrorMain.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def target(self):
        """Gets the target of this OdataErrorMain.  # noqa: E501


        :return: The target of this OdataErrorMain.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this OdataErrorMain.


        :param target: The target of this OdataErrorMain.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def details(self):
        """Gets the details of this OdataErrorMain.  # noqa: E501


        :return: The details of this OdataErrorMain.  # noqa: E501
        :rtype: list[OdataErrorDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this OdataErrorMain.


        :param details: The details of this OdataErrorMain.  # noqa: E501
        :type: list[OdataErrorDetail]
        """

        self._details = details

    @property
    def innererror(self):
        """Gets the innererror of this OdataErrorMain.  # noqa: E501

        The structure of this object is service-specific.  # noqa: E501

        :return: The innererror of this OdataErrorMain.  # noqa: E501
        :rtype: object
        """
        return self._innererror

    @innererror.setter
    def innererror(self, innererror):
        """Sets the innererror of this OdataErrorMain.

        The structure of this object is service-specific.  # noqa: E501

        :param innererror: The innererror of this OdataErrorMain.  # noqa: E501
        :type: object
        """

        self._innererror = innererror

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OdataErrorMain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OdataErrorMain):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OdataErrorMain):
            return True

        return self.to_dict() != other.to_dict()
