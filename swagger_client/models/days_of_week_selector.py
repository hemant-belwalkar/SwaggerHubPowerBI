# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DaysOfWeekSelector(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sunday': 'bool',
        'monday': 'bool',
        'tuesday': 'bool',
        'wednesday': 'bool',
        'thursday': 'bool',
        'friday': 'bool',
        'saturday': 'bool'
    }

    attribute_map = {
        'sunday': 'Sunday',
        'monday': 'Monday',
        'tuesday': 'Tuesday',
        'wednesday': 'Wednesday',
        'thursday': 'Thursday',
        'friday': 'Friday',
        'saturday': 'Saturday'
    }

    def __init__(self, sunday=None, monday=None, tuesday=None, wednesday=None, thursday=None, friday=None, saturday=None, _configuration=None):  # noqa: E501
        """DaysOfWeekSelector - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sunday = None
        self._monday = None
        self._tuesday = None
        self._wednesday = None
        self._thursday = None
        self._friday = None
        self._saturday = None
        self.discriminator = None

        if sunday is not None:
            self.sunday = sunday
        if monday is not None:
            self.monday = monday
        if tuesday is not None:
            self.tuesday = tuesday
        if wednesday is not None:
            self.wednesday = wednesday
        if thursday is not None:
            self.thursday = thursday
        if friday is not None:
            self.friday = friday
        if saturday is not None:
            self.saturday = saturday

    @property
    def sunday(self):
        """Gets the sunday of this DaysOfWeekSelector.  # noqa: E501


        :return: The sunday of this DaysOfWeekSelector.  # noqa: E501
        :rtype: bool
        """
        return self._sunday

    @sunday.setter
    def sunday(self, sunday):
        """Sets the sunday of this DaysOfWeekSelector.


        :param sunday: The sunday of this DaysOfWeekSelector.  # noqa: E501
        :type: bool
        """

        self._sunday = sunday

    @property
    def monday(self):
        """Gets the monday of this DaysOfWeekSelector.  # noqa: E501


        :return: The monday of this DaysOfWeekSelector.  # noqa: E501
        :rtype: bool
        """
        return self._monday

    @monday.setter
    def monday(self, monday):
        """Sets the monday of this DaysOfWeekSelector.


        :param monday: The monday of this DaysOfWeekSelector.  # noqa: E501
        :type: bool
        """

        self._monday = monday

    @property
    def tuesday(self):
        """Gets the tuesday of this DaysOfWeekSelector.  # noqa: E501


        :return: The tuesday of this DaysOfWeekSelector.  # noqa: E501
        :rtype: bool
        """
        return self._tuesday

    @tuesday.setter
    def tuesday(self, tuesday):
        """Sets the tuesday of this DaysOfWeekSelector.


        :param tuesday: The tuesday of this DaysOfWeekSelector.  # noqa: E501
        :type: bool
        """

        self._tuesday = tuesday

    @property
    def wednesday(self):
        """Gets the wednesday of this DaysOfWeekSelector.  # noqa: E501


        :return: The wednesday of this DaysOfWeekSelector.  # noqa: E501
        :rtype: bool
        """
        return self._wednesday

    @wednesday.setter
    def wednesday(self, wednesday):
        """Sets the wednesday of this DaysOfWeekSelector.


        :param wednesday: The wednesday of this DaysOfWeekSelector.  # noqa: E501
        :type: bool
        """

        self._wednesday = wednesday

    @property
    def thursday(self):
        """Gets the thursday of this DaysOfWeekSelector.  # noqa: E501


        :return: The thursday of this DaysOfWeekSelector.  # noqa: E501
        :rtype: bool
        """
        return self._thursday

    @thursday.setter
    def thursday(self, thursday):
        """Sets the thursday of this DaysOfWeekSelector.


        :param thursday: The thursday of this DaysOfWeekSelector.  # noqa: E501
        :type: bool
        """

        self._thursday = thursday

    @property
    def friday(self):
        """Gets the friday of this DaysOfWeekSelector.  # noqa: E501


        :return: The friday of this DaysOfWeekSelector.  # noqa: E501
        :rtype: bool
        """
        return self._friday

    @friday.setter
    def friday(self, friday):
        """Sets the friday of this DaysOfWeekSelector.


        :param friday: The friday of this DaysOfWeekSelector.  # noqa: E501
        :type: bool
        """

        self._friday = friday

    @property
    def saturday(self):
        """Gets the saturday of this DaysOfWeekSelector.  # noqa: E501


        :return: The saturday of this DaysOfWeekSelector.  # noqa: E501
        :rtype: bool
        """
        return self._saturday

    @saturday.setter
    def saturday(self, saturday):
        """Sets the saturday of this DaysOfWeekSelector.


        :param saturday: The saturday of this DaysOfWeekSelector.  # noqa: E501
        :type: bool
        """

        self._saturday = saturday

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DaysOfWeekSelector, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DaysOfWeekSelector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DaysOfWeekSelector):
            return True

        return self.to_dict() != other.to_dict()
