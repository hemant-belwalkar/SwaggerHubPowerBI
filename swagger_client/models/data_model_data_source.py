# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DataModelDataSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_type': 'DataModelDataSourceAuthType',
        'supported_auth_types': 'list[DataModelDataSourceAuthType]',
        'kind': 'DataModelDataSourceKind',
        'model_connection_name': 'str',
        'secret': 'str',
        'type': 'DataModelDataSourceType',
        'username': 'str'
    }

    attribute_map = {
        'auth_type': 'AuthType',
        'supported_auth_types': 'SupportedAuthTypes',
        'kind': 'Kind',
        'model_connection_name': 'ModelConnectionName',
        'secret': 'Secret',
        'type': 'Type',
        'username': 'Username'
    }

    def __init__(self, auth_type=None, supported_auth_types=None, kind=None, model_connection_name=None, secret=None, type=None, username=None, _configuration=None):  # noqa: E501
        """DataModelDataSource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auth_type = None
        self._supported_auth_types = None
        self._kind = None
        self._model_connection_name = None
        self._secret = None
        self._type = None
        self._username = None
        self.discriminator = None

        if auth_type is not None:
            self.auth_type = auth_type
        if supported_auth_types is not None:
            self.supported_auth_types = supported_auth_types
        if kind is not None:
            self.kind = kind
        if model_connection_name is not None:
            self.model_connection_name = model_connection_name
        if secret is not None:
            self.secret = secret
        if type is not None:
            self.type = type
        if username is not None:
            self.username = username

    @property
    def auth_type(self):
        """Gets the auth_type of this DataModelDataSource.  # noqa: E501


        :return: The auth_type of this DataModelDataSource.  # noqa: E501
        :rtype: DataModelDataSourceAuthType
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this DataModelDataSource.


        :param auth_type: The auth_type of this DataModelDataSource.  # noqa: E501
        :type: DataModelDataSourceAuthType
        """

        self._auth_type = auth_type

    @property
    def supported_auth_types(self):
        """Gets the supported_auth_types of this DataModelDataSource.  # noqa: E501


        :return: The supported_auth_types of this DataModelDataSource.  # noqa: E501
        :rtype: list[DataModelDataSourceAuthType]
        """
        return self._supported_auth_types

    @supported_auth_types.setter
    def supported_auth_types(self, supported_auth_types):
        """Sets the supported_auth_types of this DataModelDataSource.


        :param supported_auth_types: The supported_auth_types of this DataModelDataSource.  # noqa: E501
        :type: list[DataModelDataSourceAuthType]
        """

        self._supported_auth_types = supported_auth_types

    @property
    def kind(self):
        """Gets the kind of this DataModelDataSource.  # noqa: E501


        :return: The kind of this DataModelDataSource.  # noqa: E501
        :rtype: DataModelDataSourceKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DataModelDataSource.


        :param kind: The kind of this DataModelDataSource.  # noqa: E501
        :type: DataModelDataSourceKind
        """

        self._kind = kind

    @property
    def model_connection_name(self):
        """Gets the model_connection_name of this DataModelDataSource.  # noqa: E501

        The name of the model connection.  # noqa: E501

        :return: The model_connection_name of this DataModelDataSource.  # noqa: E501
        :rtype: str
        """
        return self._model_connection_name

    @model_connection_name.setter
    def model_connection_name(self, model_connection_name):
        """Sets the model_connection_name of this DataModelDataSource.

        The name of the model connection.  # noqa: E501

        :param model_connection_name: The model_connection_name of this DataModelDataSource.  # noqa: E501
        :type: str
        """

        self._model_connection_name = model_connection_name

    @property
    def secret(self):
        """Gets the secret of this DataModelDataSource.  # noqa: E501

        The value of the credential secret.  # noqa: E501

        :return: The secret of this DataModelDataSource.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this DataModelDataSource.

        The value of the credential secret.  # noqa: E501

        :param secret: The secret of this DataModelDataSource.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def type(self):
        """Gets the type of this DataModelDataSource.  # noqa: E501


        :return: The type of this DataModelDataSource.  # noqa: E501
        :rtype: DataModelDataSourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataModelDataSource.


        :param type: The type of this DataModelDataSource.  # noqa: E501
        :type: DataModelDataSourceType
        """

        self._type = type

    @property
    def username(self):
        """Gets the username of this DataModelDataSource.  # noqa: E501

        The name of the parameter.  # noqa: E501

        :return: The username of this DataModelDataSource.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DataModelDataSource.

        The name of the parameter.  # noqa: E501

        :param username: The username of this DataModelDataSource.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataModelDataSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataModelDataSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataModelDataSource):
            return True

        return self.to_dict() != other.to_dict()
