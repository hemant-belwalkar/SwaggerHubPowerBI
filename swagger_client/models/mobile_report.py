# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MobileReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_caching': 'bool',
        'manifest': 'MobileReportManifest',
        'has_shared_data_sets': 'bool'
    }

    attribute_map = {
        'allow_caching': 'AllowCaching',
        'manifest': 'Manifest',
        'has_shared_data_sets': 'HasSharedDataSets'
    }

    def __init__(self, allow_caching=None, manifest=None, has_shared_data_sets=None, _configuration=None):  # noqa: E501
        """MobileReport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_caching = None
        self._manifest = None
        self._has_shared_data_sets = None
        self.discriminator = None

        if allow_caching is not None:
            self.allow_caching = allow_caching
        if manifest is not None:
            self.manifest = manifest
        if has_shared_data_sets is not None:
            self.has_shared_data_sets = has_shared_data_sets

    @property
    def allow_caching(self):
        """Gets the allow_caching of this MobileReport.  # noqa: E501

        A boolean value that indicates whether the MobileReport allows caching.  # noqa: E501

        :return: The allow_caching of this MobileReport.  # noqa: E501
        :rtype: bool
        """
        return self._allow_caching

    @allow_caching.setter
    def allow_caching(self, allow_caching):
        """Sets the allow_caching of this MobileReport.

        A boolean value that indicates whether the MobileReport allows caching.  # noqa: E501

        :param allow_caching: The allow_caching of this MobileReport.  # noqa: E501
        :type: bool
        """

        self._allow_caching = allow_caching

    @property
    def manifest(self):
        """Gets the manifest of this MobileReport.  # noqa: E501


        :return: The manifest of this MobileReport.  # noqa: E501
        :rtype: MobileReportManifest
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this MobileReport.


        :param manifest: The manifest of this MobileReport.  # noqa: E501
        :type: MobileReportManifest
        """

        self._manifest = manifest

    @property
    def has_shared_data_sets(self):
        """Gets the has_shared_data_sets of this MobileReport.  # noqa: E501

        A boolean value that indicates whether the MobileReport has shared DataSets associated with it.  # noqa: E501

        :return: The has_shared_data_sets of this MobileReport.  # noqa: E501
        :rtype: bool
        """
        return self._has_shared_data_sets

    @has_shared_data_sets.setter
    def has_shared_data_sets(self, has_shared_data_sets):
        """Sets the has_shared_data_sets of this MobileReport.

        A boolean value that indicates whether the MobileReport has shared DataSets associated with it.  # noqa: E501

        :param has_shared_data_sets: The has_shared_data_sets of this MobileReport.  # noqa: E501
        :type: bool
        """

        self._has_shared_data_sets = has_shared_data_sets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MobileReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MobileReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MobileReport):
            return True

        return self.to_dict() != other.to_dict()
