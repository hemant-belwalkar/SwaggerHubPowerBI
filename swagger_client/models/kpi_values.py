# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class KpiValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'str',
        'goal': 'float',
        'status': 'float',
        'trend_set': 'list[int]'
    }

    attribute_map = {
        'value': 'Value',
        'goal': 'Goal',
        'status': 'Status',
        'trend_set': 'TrendSet'
    }

    def __init__(self, value=None, goal=None, status=None, trend_set=None, _configuration=None):  # noqa: E501
        """KpiValues - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._value = None
        self._goal = None
        self._status = None
        self._trend_set = None
        self.discriminator = None

        if value is not None:
            self.value = value
        if goal is not None:
            self.goal = goal
        if status is not None:
            self.status = status
        if trend_set is not None:
            self.trend_set = trend_set

    @property
    def value(self):
        """Gets the value of this KpiValues.  # noqa: E501

        A string value that specifies the value of the Value Property for the KPI.  # noqa: E501

        :return: The value of this KpiValues.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this KpiValues.

        A string value that specifies the value of the Value Property for the KPI.  # noqa: E501

        :param value: The value of this KpiValues.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def goal(self):
        """Gets the goal of this KpiValues.  # noqa: E501

        A Double value that specifies the value of the Goal Property for the KPI.  # noqa: E501

        :return: The goal of this KpiValues.  # noqa: E501
        :rtype: float
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this KpiValues.

        A Double value that specifies the value of the Goal Property for the KPI.  # noqa: E501

        :param goal: The goal of this KpiValues.  # noqa: E501
        :type: float
        """

        self._goal = goal

    @property
    def status(self):
        """Gets the status of this KpiValues.  # noqa: E501

        A Double value that specifies the value of the Status Property for the KPI.  # noqa: E501

        :return: The status of this KpiValues.  # noqa: E501
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this KpiValues.

        A Double value that specifies the value of the Status Property for the KPI.  # noqa: E501

        :param status: The status of this KpiValues.  # noqa: E501
        :type: float
        """

        self._status = status

    @property
    def trend_set(self):
        """Gets the trend_set of this KpiValues.  # noqa: E501

        An array of values that specifies the trendset for the KPI.  # noqa: E501

        :return: The trend_set of this KpiValues.  # noqa: E501
        :rtype: list[int]
        """
        return self._trend_set

    @trend_set.setter
    def trend_set(self, trend_set):
        """Sets the trend_set of this KpiValues.

        An array of values that specifies the trendset for the KPI.  # noqa: E501

        :param trend_set: The trend_set of this KpiValues.  # noqa: E501
        :type: list[int]
        """

        self._trend_set = trend_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KpiValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KpiValues):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KpiValues):
            return True

        return self.to_dict() != other.to_dict()
