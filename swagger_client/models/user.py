# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'username': 'str',
        'display_name': 'str',
        'has_favorite_items': 'bool',
        'my_reports_path': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'username': 'Username',
        'display_name': 'DisplayName',
        'has_favorite_items': 'HasFavoriteItems',
        'my_reports_path': 'MyReportsPath'
    }

    def __init__(self, id=None, username=None, display_name=None, has_favorite_items=None, my_reports_path=None, _configuration=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._username = None
        self._display_name = None
        self._has_favorite_items = None
        self._my_reports_path = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if display_name is not None:
            self.display_name = display_name
        if has_favorite_items is not None:
            self.has_favorite_items = has_favorite_items
        if my_reports_path is not None:
            self.my_reports_path = my_reports_path

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501

        A unique UUID value that specifies the identifier by which this User object can be referenced in requests or in other defined objects.  # noqa: E501

        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        A unique UUID value that specifies the identifier by which this User object can be referenced in requests or in other defined objects.  # noqa: E501

        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501

        A string value that specifies the network user name for the user.  # noqa: E501

        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        A string value that specifies the network user name for the user.  # noqa: E501

        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def display_name(self):
        """Gets the display_name of this User.  # noqa: E501

        A string value that specifies the name to display for the network user.  # noqa: E501

        :return: The display_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        A string value that specifies the name to display for the network user.  # noqa: E501

        :param display_name: The display_name of this User.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def has_favorite_items(self):
        """Gets the has_favorite_items of this User.  # noqa: E501

        A boolean value that indicates whether the user has items that are designated as favorite items.  # noqa: E501

        :return: The has_favorite_items of this User.  # noqa: E501
        :rtype: bool
        """
        return self._has_favorite_items

    @has_favorite_items.setter
    def has_favorite_items(self, has_favorite_items):
        """Sets the has_favorite_items of this User.

        A boolean value that indicates whether the user has items that are designated as favorite items.  # noqa: E501

        :param has_favorite_items: The has_favorite_items of this User.  # noqa: E501
        :type: bool
        """

        self._has_favorite_items = has_favorite_items

    @property
    def my_reports_path(self):
        """Gets the my_reports_path of this User.  # noqa: E501

        A string value that specifies a path to a folder where a user's reports are stored by default. (This feature must be enabled by the server administrator).  # noqa: E501

        :return: The my_reports_path of this User.  # noqa: E501
        :rtype: str
        """
        return self._my_reports_path

    @my_reports_path.setter
    def my_reports_path(self, my_reports_path):
        """Sets the my_reports_path of this User.

        A string value that specifies a path to a folder where a user's reports are stored by default. (This feature must be enabled by the server administrator).  # noqa: E501

        :param my_reports_path: The my_reports_path of this User.  # noqa: E501
        :type: str
        """

        self._my_reports_path = my_reports_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
