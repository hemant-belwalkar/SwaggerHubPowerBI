# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CatalogItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'path': 'str',
        'type': 'CatalogItemType',
        'hidden': 'bool',
        'size': 'int',
        'modified_by': 'str',
        'modified_date': 'datetime',
        'created_by': 'str',
        'created_date': 'datetime',
        'parent_folder_id': 'str',
        'content_type': 'str',
        'content': 'str',
        'is_favorite': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'path': 'Path',
        'type': 'Type',
        'hidden': 'Hidden',
        'size': 'Size',
        'modified_by': 'ModifiedBy',
        'modified_date': 'ModifiedDate',
        'created_by': 'CreatedBy',
        'created_date': 'CreatedDate',
        'parent_folder_id': 'ParentFolderId',
        'content_type': 'ContentType',
        'content': 'Content',
        'is_favorite': 'IsFavorite'
    }

    def __init__(self, id=None, name=None, description=None, path=None, type=None, hidden=None, size=None, modified_by=None, modified_date=None, created_by=None, created_date=None, parent_folder_id=None, content_type=None, content=None, is_favorite=None, _configuration=None):  # noqa: E501
        """CatalogItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._path = None
        self._type = None
        self._hidden = None
        self._size = None
        self._modified_by = None
        self._modified_date = None
        self._created_by = None
        self._created_date = None
        self._parent_folder_id = None
        self._content_type = None
        self._content = None
        self._is_favorite = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if path is not None:
            self.path = path
        if type is not None:
            self.type = type
        if hidden is not None:
            self.hidden = hidden
        if size is not None:
            self.size = size
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_date is not None:
            self.modified_date = modified_date
        if created_by is not None:
            self.created_by = created_by
        if created_date is not None:
            self.created_date = created_date
        if parent_folder_id is not None:
            self.parent_folder_id = parent_folder_id
        if content_type is not None:
            self.content_type = content_type
        if content is not None:
            self.content = content
        if is_favorite is not None:
            self.is_favorite = is_favorite

    @property
    def id(self):
        """Gets the id of this CatalogItem.  # noqa: E501

        A unique UUID value that specifies the identifier by which this CatalogItem can be referenced in requests or by other defined objects.  # noqa: E501

        :return: The id of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogItem.

        A unique UUID value that specifies the identifier by which this CatalogItem can be referenced in requests or by other defined objects.  # noqa: E501

        :param id: The id of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CatalogItem.  # noqa: E501

        A string value that specifies the name for the CatalogItem. This name is typically displayed in the user interface.  # noqa: E501

        :return: The name of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogItem.

        A string value that specifies the name for the CatalogItem. This name is typically displayed in the user interface.  # noqa: E501

        :param name: The name of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CatalogItem.  # noqa: E501

        A string value that contains descriptive text about the CatalogItem.  # noqa: E501

        :return: The description of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CatalogItem.

        A string value that contains descriptive text about the CatalogItem.  # noqa: E501

        :param description: The description of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def path(self):
        """Gets the path of this CatalogItem.  # noqa: E501

        A string value that contains the full server path for the CatalogItem. Path is defined as an alternate key on the CatalogItem and can be used as the parameter by which CatalogItem can be referenced in requests or by other defined objects.  # noqa: E501

        :return: The path of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CatalogItem.

        A string value that contains the full server path for the CatalogItem. Path is defined as an alternate key on the CatalogItem and can be used as the parameter by which CatalogItem can be referenced in requests or by other defined objects.  # noqa: E501

        :param path: The path of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def type(self):
        """Gets the type of this CatalogItem.  # noqa: E501


        :return: The type of this CatalogItem.  # noqa: E501
        :rtype: CatalogItemType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CatalogItem.


        :param type: The type of this CatalogItem.  # noqa: E501
        :type: CatalogItemType
        """

        self._type = type

    @property
    def hidden(self):
        """Gets the hidden of this CatalogItem.  # noqa: E501

        A boolean value that indicates if the CatalogItem is hidden. If true, the item will generally not appear in listings of CatalogItems within the parent item.  # noqa: E501

        :return: The hidden of this CatalogItem.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this CatalogItem.

        A boolean value that indicates if the CatalogItem is hidden. If true, the item will generally not appear in listings of CatalogItems within the parent item.  # noqa: E501

        :param hidden: The hidden of this CatalogItem.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def size(self):
        """Gets the size of this CatalogItem.  # noqa: E501

        An Int64 value that contains the size of the CatalogItem in bytes.  # noqa: E501

        :return: The size of this CatalogItem.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CatalogItem.

        An Int64 value that contains the size of the CatalogItem in bytes.  # noqa: E501

        :param size: The size of this CatalogItem.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def modified_by(self):
        """Gets the modified_by of this CatalogItem.  # noqa: E501

        A string value that contains the network user name of the last user to modify the CatalogItem.  # noqa: E501

        :return: The modified_by of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this CatalogItem.

        A string value that contains the network user name of the last user to modify the CatalogItem.  # noqa: E501

        :param modified_by: The modified_by of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def modified_date(self):
        """Gets the modified_date of this CatalogItem.  # noqa: E501

        A string value that contains the date-time of the last modification to the CatalogItem.  # noqa: E501

        :return: The modified_date of this CatalogItem.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CatalogItem.

        A string value that contains the date-time of the last modification to the CatalogItem.  # noqa: E501

        :param modified_date: The modified_date of this CatalogItem.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def created_by(self):
        """Gets the created_by of this CatalogItem.  # noqa: E501

        A string value that represents the network user name of the user who originally created the CatalogItem.  # noqa: E501

        :return: The created_by of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CatalogItem.

        A string value that represents the network user name of the user who originally created the CatalogItem.  # noqa: E501

        :param created_by: The created_by of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this CatalogItem.  # noqa: E501

        A string that contains the date-time of the creation of the CatalogItem.  # noqa: E501

        :return: The created_date of this CatalogItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CatalogItem.

        A string that contains the date-time of the creation of the CatalogItem.  # noqa: E501

        :param created_date: The created_date of this CatalogItem.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this CatalogItem.  # noqa: E501

        A unique UUID value that specifies the identifier of the Folder CatalogItem that contains this CatalogItem.  # noqa: E501

        :return: The parent_folder_id of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this CatalogItem.

        A unique UUID value that specifies the identifier of the Folder CatalogItem that contains this CatalogItem.  # noqa: E501

        :param parent_folder_id: The parent_folder_id of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def content_type(self):
        """Gets the content_type of this CatalogItem.  # noqa: E501

        A string value that contains a SOAP MIME-type that is associated with the CatalogItem.  # noqa: E501

        :return: The content_type of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this CatalogItem.

        A string value that contains a SOAP MIME-type that is associated with the CatalogItem.  # noqa: E501

        :param content_type: The content_type of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def content(self):
        """Gets the content of this CatalogItem.  # noqa: E501

        A string value that contains binary encoding by base64url encoding rules. The value of this property is not processed by the server. In object creation the server receives and stores a value, and in object retrieval the server returns the previously stored value.  # noqa: E501

        :return: The content of this CatalogItem.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CatalogItem.

        A string value that contains binary encoding by base64url encoding rules. The value of this property is not processed by the server. In object creation the server receives and stores a value, and in object retrieval the server returns the previously stored value.  # noqa: E501

        :param content: The content of this CatalogItem.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def is_favorite(self):
        """Gets the is_favorite of this CatalogItem.  # noqa: E501

        A boolean value that specifies whether the CatalogItem is designated as a Favorite.  # noqa: E501

        :return: The is_favorite of this CatalogItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_favorite

    @is_favorite.setter
    def is_favorite(self, is_favorite):
        """Sets the is_favorite of this CatalogItem.

        A boolean value that specifies whether the CatalogItem is designated as a Favorite.  # noqa: E501

        :param is_favorite: The is_favorite of this CatalogItem.  # noqa: E501
        :type: bool
        """

        self._is_favorite = is_favorite

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CatalogItem):
            return True

        return self.to_dict() != other.to_dict()
