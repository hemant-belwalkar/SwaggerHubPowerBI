# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ReportParameterDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_blank': 'bool',
        'default_values': 'list[str]',
        'default_values_is_null': 'bool',
        'default_values_query_based': 'bool',
        'dependencies': 'list[str]',
        'error_message': 'str',
        'multi_value': 'bool',
        'name': 'str',
        'nullable': 'bool',
        'parameter_state': 'ReportParameterState',
        'parameter_type': 'ReportParameterType',
        'parameter_visibility': 'ReportParameterVisibility',
        'prompt': 'str',
        'prompt_user': 'bool',
        'query_parameter': 'bool',
        'valid_values': 'list[ValidValue]',
        'valid_values_is_null': 'bool',
        'valid_values_query_based': 'bool'
    }

    attribute_map = {
        'allow_blank': 'AllowBlank',
        'default_values': 'DefaultValues',
        'default_values_is_null': 'DefaultValuesIsNull',
        'default_values_query_based': 'DefaultValuesQueryBased',
        'dependencies': 'Dependencies',
        'error_message': 'ErrorMessage',
        'multi_value': 'MultiValue',
        'name': 'Name',
        'nullable': 'Nullable',
        'parameter_state': 'ParameterState',
        'parameter_type': 'ParameterType',
        'parameter_visibility': 'ParameterVisibility',
        'prompt': 'Prompt',
        'prompt_user': 'PromptUser',
        'query_parameter': 'QueryParameter',
        'valid_values': 'ValidValues',
        'valid_values_is_null': 'ValidValuesIsNull',
        'valid_values_query_based': 'ValidValuesQueryBased'
    }

    def __init__(self, allow_blank=None, default_values=None, default_values_is_null=None, default_values_query_based=None, dependencies=None, error_message=None, multi_value=None, name=None, nullable=None, parameter_state=None, parameter_type=None, parameter_visibility=None, prompt=None, prompt_user=None, query_parameter=None, valid_values=None, valid_values_is_null=None, valid_values_query_based=None, _configuration=None):  # noqa: E501
        """ReportParameterDefinition - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_blank = None
        self._default_values = None
        self._default_values_is_null = None
        self._default_values_query_based = None
        self._dependencies = None
        self._error_message = None
        self._multi_value = None
        self._name = None
        self._nullable = None
        self._parameter_state = None
        self._parameter_type = None
        self._parameter_visibility = None
        self._prompt = None
        self._prompt_user = None
        self._query_parameter = None
        self._valid_values = None
        self._valid_values_is_null = None
        self._valid_values_query_based = None
        self.discriminator = None

        if allow_blank is not None:
            self.allow_blank = allow_blank
        if default_values is not None:
            self.default_values = default_values
        if default_values_is_null is not None:
            self.default_values_is_null = default_values_is_null
        if default_values_query_based is not None:
            self.default_values_query_based = default_values_query_based
        if dependencies is not None:
            self.dependencies = dependencies
        if error_message is not None:
            self.error_message = error_message
        if multi_value is not None:
            self.multi_value = multi_value
        if name is not None:
            self.name = name
        if nullable is not None:
            self.nullable = nullable
        if parameter_state is not None:
            self.parameter_state = parameter_state
        if parameter_type is not None:
            self.parameter_type = parameter_type
        if parameter_visibility is not None:
            self.parameter_visibility = parameter_visibility
        if prompt is not None:
            self.prompt = prompt
        if prompt_user is not None:
            self.prompt_user = prompt_user
        if query_parameter is not None:
            self.query_parameter = query_parameter
        if valid_values is not None:
            self.valid_values = valid_values
        if valid_values_is_null is not None:
            self.valid_values_is_null = valid_values_is_null
        if valid_values_query_based is not None:
            self.valid_values_query_based = valid_values_query_based

    @property
    def allow_blank(self):
        """Gets the allow_blank of this ReportParameterDefinition.  # noqa: E501

        A boolean value that indicates whether the ReportParamter is allowed to be blank.  # noqa: E501

        :return: The allow_blank of this ReportParameterDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._allow_blank

    @allow_blank.setter
    def allow_blank(self, allow_blank):
        """Sets the allow_blank of this ReportParameterDefinition.

        A boolean value that indicates whether the ReportParamter is allowed to be blank.  # noqa: E501

        :param allow_blank: The allow_blank of this ReportParameterDefinition.  # noqa: E501
        :type: bool
        """

        self._allow_blank = allow_blank

    @property
    def default_values(self):
        """Gets the default_values of this ReportParameterDefinition.  # noqa: E501

        An array of string values that specify the ReportParameter's default values. If the parameter is multi-valued then the array can have more than one entry.  # noqa: E501

        :return: The default_values of this ReportParameterDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_values

    @default_values.setter
    def default_values(self, default_values):
        """Sets the default_values of this ReportParameterDefinition.

        An array of string values that specify the ReportParameter's default values. If the parameter is multi-valued then the array can have more than one entry.  # noqa: E501

        :param default_values: The default_values of this ReportParameterDefinition.  # noqa: E501
        :type: list[str]
        """

        self._default_values = default_values

    @property
    def default_values_is_null(self):
        """Gets the default_values_is_null of this ReportParameterDefinition.  # noqa: E501

         A boolean value that indicates whether the DefaultValues property is NULL.  # noqa: E501

        :return: The default_values_is_null of this ReportParameterDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._default_values_is_null

    @default_values_is_null.setter
    def default_values_is_null(self, default_values_is_null):
        """Sets the default_values_is_null of this ReportParameterDefinition.

         A boolean value that indicates whether the DefaultValues property is NULL.  # noqa: E501

        :param default_values_is_null: The default_values_is_null of this ReportParameterDefinition.  # noqa: E501
        :type: bool
        """

        self._default_values_is_null = default_values_is_null

    @property
    def default_values_query_based(self):
        """Gets the default_values_query_based of this ReportParameterDefinition.  # noqa: E501

        A boolean value that indicates whether the ReportParamter's default values are obtained from a query (instead of being static specified values).  # noqa: E501

        :return: The default_values_query_based of this ReportParameterDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._default_values_query_based

    @default_values_query_based.setter
    def default_values_query_based(self, default_values_query_based):
        """Sets the default_values_query_based of this ReportParameterDefinition.

        A boolean value that indicates whether the ReportParamter's default values are obtained from a query (instead of being static specified values).  # noqa: E501

        :param default_values_query_based: The default_values_query_based of this ReportParameterDefinition.  # noqa: E501
        :type: bool
        """

        self._default_values_query_based = default_values_query_based

    @property
    def dependencies(self):
        """Gets the dependencies of this ReportParameterDefinition.  # noqa: E501

        An array of string values that specify the dependencies for the ReportParameter.  # noqa: E501

        :return: The dependencies of this ReportParameterDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this ReportParameterDefinition.

        An array of string values that specify the dependencies for the ReportParameter.  # noqa: E501

        :param dependencies: The dependencies of this ReportParameterDefinition.  # noqa: E501
        :type: list[str]
        """

        self._dependencies = dependencies

    @property
    def error_message(self):
        """Gets the error_message of this ReportParameterDefinition.  # noqa: E501

        Error returned when validating parameters.  # noqa: E501

        :return: The error_message of this ReportParameterDefinition.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ReportParameterDefinition.

        Error returned when validating parameters.  # noqa: E501

        :param error_message: The error_message of this ReportParameterDefinition.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def multi_value(self):
        """Gets the multi_value of this ReportParameterDefinition.  # noqa: E501

        A boolean value that indicates whether the ReportParameter is multivalued.  # noqa: E501

        :return: The multi_value of this ReportParameterDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._multi_value

    @multi_value.setter
    def multi_value(self, multi_value):
        """Sets the multi_value of this ReportParameterDefinition.

        A boolean value that indicates whether the ReportParameter is multivalued.  # noqa: E501

        :param multi_value: The multi_value of this ReportParameterDefinition.  # noqa: E501
        :type: bool
        """

        self._multi_value = multi_value

    @property
    def name(self):
        """Gets the name of this ReportParameterDefinition.  # noqa: E501

        A string value that specifies the name for the ReportParameter. This name will typically be displayed in the user interface.  # noqa: E501

        :return: The name of this ReportParameterDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportParameterDefinition.

        A string value that specifies the name for the ReportParameter. This name will typically be displayed in the user interface.  # noqa: E501

        :param name: The name of this ReportParameterDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nullable(self):
        """Gets the nullable of this ReportParameterDefinition.  # noqa: E501

        A boolean value that indicates whether the ReportParameter is allowed to be null.  # noqa: E501

        :return: The nullable of this ReportParameterDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._nullable

    @nullable.setter
    def nullable(self, nullable):
        """Sets the nullable of this ReportParameterDefinition.

        A boolean value that indicates whether the ReportParameter is allowed to be null.  # noqa: E501

        :param nullable: The nullable of this ReportParameterDefinition.  # noqa: E501
        :type: bool
        """

        self._nullable = nullable

    @property
    def parameter_state(self):
        """Gets the parameter_state of this ReportParameterDefinition.  # noqa: E501


        :return: The parameter_state of this ReportParameterDefinition.  # noqa: E501
        :rtype: ReportParameterState
        """
        return self._parameter_state

    @parameter_state.setter
    def parameter_state(self, parameter_state):
        """Sets the parameter_state of this ReportParameterDefinition.


        :param parameter_state: The parameter_state of this ReportParameterDefinition.  # noqa: E501
        :type: ReportParameterState
        """

        self._parameter_state = parameter_state

    @property
    def parameter_type(self):
        """Gets the parameter_type of this ReportParameterDefinition.  # noqa: E501


        :return: The parameter_type of this ReportParameterDefinition.  # noqa: E501
        :rtype: ReportParameterType
        """
        return self._parameter_type

    @parameter_type.setter
    def parameter_type(self, parameter_type):
        """Sets the parameter_type of this ReportParameterDefinition.


        :param parameter_type: The parameter_type of this ReportParameterDefinition.  # noqa: E501
        :type: ReportParameterType
        """

        self._parameter_type = parameter_type

    @property
    def parameter_visibility(self):
        """Gets the parameter_visibility of this ReportParameterDefinition.  # noqa: E501


        :return: The parameter_visibility of this ReportParameterDefinition.  # noqa: E501
        :rtype: ReportParameterVisibility
        """
        return self._parameter_visibility

    @parameter_visibility.setter
    def parameter_visibility(self, parameter_visibility):
        """Sets the parameter_visibility of this ReportParameterDefinition.


        :param parameter_visibility: The parameter_visibility of this ReportParameterDefinition.  # noqa: E501
        :type: ReportParameterVisibility
        """

        self._parameter_visibility = parameter_visibility

    @property
    def prompt(self):
        """Gets the prompt of this ReportParameterDefinition.  # noqa: E501

        A string value that specifies text used to prompt a user for the value of the ReportParameter.  # noqa: E501

        :return: The prompt of this ReportParameterDefinition.  # noqa: E501
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this ReportParameterDefinition.

        A string value that specifies text used to prompt a user for the value of the ReportParameter.  # noqa: E501

        :param prompt: The prompt of this ReportParameterDefinition.  # noqa: E501
        :type: str
        """

        self._prompt = prompt

    @property
    def prompt_user(self):
        """Gets the prompt_user of this ReportParameterDefinition.  # noqa: E501

        A boolean value that indicates whether the user should be prompted for the value for the ReportParameter.  # noqa: E501

        :return: The prompt_user of this ReportParameterDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._prompt_user

    @prompt_user.setter
    def prompt_user(self, prompt_user):
        """Sets the prompt_user of this ReportParameterDefinition.

        A boolean value that indicates whether the user should be prompted for the value for the ReportParameter.  # noqa: E501

        :param prompt_user: The prompt_user of this ReportParameterDefinition.  # noqa: E501
        :type: bool
        """

        self._prompt_user = prompt_user

    @property
    def query_parameter(self):
        """Gets the query_parameter of this ReportParameterDefinition.  # noqa: E501

        A boolean value that indicates whether the ReportParamter is query based.  # noqa: E501

        :return: The query_parameter of this ReportParameterDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._query_parameter

    @query_parameter.setter
    def query_parameter(self, query_parameter):
        """Sets the query_parameter of this ReportParameterDefinition.

        A boolean value that indicates whether the ReportParamter is query based.  # noqa: E501

        :param query_parameter: The query_parameter of this ReportParameterDefinition.  # noqa: E501
        :type: bool
        """

        self._query_parameter = query_parameter

    @property
    def valid_values(self):
        """Gets the valid_values of this ReportParameterDefinition.  # noqa: E501


        :return: The valid_values of this ReportParameterDefinition.  # noqa: E501
        :rtype: list[ValidValue]
        """
        return self._valid_values

    @valid_values.setter
    def valid_values(self, valid_values):
        """Sets the valid_values of this ReportParameterDefinition.


        :param valid_values: The valid_values of this ReportParameterDefinition.  # noqa: E501
        :type: list[ValidValue]
        """

        self._valid_values = valid_values

    @property
    def valid_values_is_null(self):
        """Gets the valid_values_is_null of this ReportParameterDefinition.  # noqa: E501

        A boolean value that indicates whether the ValidValues property is NULL.  # noqa: E501

        :return: The valid_values_is_null of this ReportParameterDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._valid_values_is_null

    @valid_values_is_null.setter
    def valid_values_is_null(self, valid_values_is_null):
        """Sets the valid_values_is_null of this ReportParameterDefinition.

        A boolean value that indicates whether the ValidValues property is NULL.  # noqa: E501

        :param valid_values_is_null: The valid_values_is_null of this ReportParameterDefinition.  # noqa: E501
        :type: bool
        """

        self._valid_values_is_null = valid_values_is_null

    @property
    def valid_values_query_based(self):
        """Gets the valid_values_query_based of this ReportParameterDefinition.  # noqa: E501

        A boolean value that indicates whether the ReportParameter's valid values are obtained from a query (instead of being static specified values).  # noqa: E501

        :return: The valid_values_query_based of this ReportParameterDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._valid_values_query_based

    @valid_values_query_based.setter
    def valid_values_query_based(self, valid_values_query_based):
        """Sets the valid_values_query_based of this ReportParameterDefinition.

        A boolean value that indicates whether the ReportParameter's valid values are obtained from a query (instead of being static specified values).  # noqa: E501

        :param valid_values_query_based: The valid_values_query_based of this ReportParameterDefinition.  # noqa: E501
        :type: bool
        """

        self._valid_values_query_based = valid_values_query_based

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportParameterDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportParameterDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportParameterDefinition):
            return True

        return self.to_dict() != other.to_dict()
