# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DataSetParameterInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'default_value': 'str',
        'nullable': 'bool',
        'data_type': 'ReportParameterType',
        'is_expression': 'bool',
        'is_multi_valued': 'bool'
    }

    attribute_map = {
        'name': 'Name',
        'default_value': 'DefaultValue',
        'nullable': 'Nullable',
        'data_type': 'DataType',
        'is_expression': 'IsExpression',
        'is_multi_valued': 'IsMultiValued'
    }

    def __init__(self, name=None, default_value=None, nullable=None, data_type=None, is_expression=None, is_multi_valued=None, _configuration=None):  # noqa: E501
        """DataSetParameterInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._default_value = None
        self._nullable = None
        self._data_type = None
        self._is_expression = None
        self._is_multi_valued = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if default_value is not None:
            self.default_value = default_value
        if nullable is not None:
            self.nullable = nullable
        if data_type is not None:
            self.data_type = data_type
        if is_expression is not None:
            self.is_expression = is_expression
        if is_multi_valued is not None:
            self.is_multi_valued = is_multi_valued

    @property
    def name(self):
        """Gets the name of this DataSetParameterInfo.  # noqa: E501

        The name of the parameter.  # noqa: E501

        :return: The name of this DataSetParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSetParameterInfo.

        The name of the parameter.  # noqa: E501

        :param name: The name of this DataSetParameterInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def default_value(self):
        """Gets the default_value of this DataSetParameterInfo.  # noqa: E501

        The default value for the parameter.  # noqa: E501

        :return: The default_value of this DataSetParameterInfo.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this DataSetParameterInfo.

        The default value for the parameter.  # noqa: E501

        :param default_value: The default_value of this DataSetParameterInfo.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def nullable(self):
        """Gets the nullable of this DataSetParameterInfo.  # noqa: E501

        Specifies whether the parameter can be null.  # noqa: E501

        :return: The nullable of this DataSetParameterInfo.  # noqa: E501
        :rtype: bool
        """
        return self._nullable

    @nullable.setter
    def nullable(self, nullable):
        """Sets the nullable of this DataSetParameterInfo.

        Specifies whether the parameter can be null.  # noqa: E501

        :param nullable: The nullable of this DataSetParameterInfo.  # noqa: E501
        :type: bool
        """

        self._nullable = nullable

    @property
    def data_type(self):
        """Gets the data_type of this DataSetParameterInfo.  # noqa: E501


        :return: The data_type of this DataSetParameterInfo.  # noqa: E501
        :rtype: ReportParameterType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DataSetParameterInfo.


        :param data_type: The data_type of this DataSetParameterInfo.  # noqa: E501
        :type: ReportParameterType
        """

        self._data_type = data_type

    @property
    def is_expression(self):
        """Gets the is_expression of this DataSetParameterInfo.  # noqa: E501

        Specifies whether the parameter is an expression.  # noqa: E501

        :return: The is_expression of this DataSetParameterInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_expression

    @is_expression.setter
    def is_expression(self, is_expression):
        """Sets the is_expression of this DataSetParameterInfo.

        Specifies whether the parameter is an expression.  # noqa: E501

        :param is_expression: The is_expression of this DataSetParameterInfo.  # noqa: E501
        :type: bool
        """

        self._is_expression = is_expression

    @property
    def is_multi_valued(self):
        """Gets the is_multi_valued of this DataSetParameterInfo.  # noqa: E501

        Specifies whether the parameter contains multiple values.  # noqa: E501

        :return: The is_multi_valued of this DataSetParameterInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_multi_valued

    @is_multi_valued.setter
    def is_multi_valued(self, is_multi_valued):
        """Sets the is_multi_valued of this DataSetParameterInfo.

        Specifies whether the parameter contains multiple values.  # noqa: E501

        :param is_multi_valued: The is_multi_valued of this DataSetParameterInfo.  # noqa: E501
        :type: bool
        """

        self._is_multi_valued = is_multi_valued

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataSetParameterInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSetParameterInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataSetParameterInfo):
            return True

        return self.to_dict() != other.to_dict()
