# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Subscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'owner': 'str',
        'is_data_driven': 'bool',
        'description': 'str',
        'report': 'str',
        'is_active': 'bool',
        'event_type': 'str',
        'schedule_description': 'str',
        'last_run_time': 'datetime',
        'last_status': 'str',
        'extension_settings': 'ExtensionSettings',
        'delivery_extension': 'str',
        'localized_delivery_extension_name': 'str',
        'modified_by': 'str',
        'modified_date': 'datetime',
        'parameter_values': 'list[ParameterValue]'
    }

    attribute_map = {
        'id': 'Id',
        'owner': 'Owner',
        'is_data_driven': 'IsDataDriven',
        'description': 'Description',
        'report': 'Report',
        'is_active': 'IsActive',
        'event_type': 'EventType',
        'schedule_description': 'ScheduleDescription',
        'last_run_time': 'LastRunTime',
        'last_status': 'LastStatus',
        'extension_settings': 'ExtensionSettings',
        'delivery_extension': 'DeliveryExtension',
        'localized_delivery_extension_name': 'LocalizedDeliveryExtensionName',
        'modified_by': 'ModifiedBy',
        'modified_date': 'ModifiedDate',
        'parameter_values': 'ParameterValues'
    }

    def __init__(self, id=None, owner=None, is_data_driven=None, description=None, report=None, is_active=None, event_type=None, schedule_description=None, last_run_time=None, last_status=None, extension_settings=None, delivery_extension=None, localized_delivery_extension_name=None, modified_by=None, modified_date=None, parameter_values=None, _configuration=None):  # noqa: E501
        """Subscription - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._owner = None
        self._is_data_driven = None
        self._description = None
        self._report = None
        self._is_active = None
        self._event_type = None
        self._schedule_description = None
        self._last_run_time = None
        self._last_status = None
        self._extension_settings = None
        self._delivery_extension = None
        self._localized_delivery_extension_name = None
        self._modified_by = None
        self._modified_date = None
        self._parameter_values = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if owner is not None:
            self.owner = owner
        if is_data_driven is not None:
            self.is_data_driven = is_data_driven
        if description is not None:
            self.description = description
        if report is not None:
            self.report = report
        if is_active is not None:
            self.is_active = is_active
        if event_type is not None:
            self.event_type = event_type
        if schedule_description is not None:
            self.schedule_description = schedule_description
        if last_run_time is not None:
            self.last_run_time = last_run_time
        if last_status is not None:
            self.last_status = last_status
        if extension_settings is not None:
            self.extension_settings = extension_settings
        if delivery_extension is not None:
            self.delivery_extension = delivery_extension
        if localized_delivery_extension_name is not None:
            self.localized_delivery_extension_name = localized_delivery_extension_name
        if modified_by is not None:
            self.modified_by = modified_by
        if modified_date is not None:
            self.modified_date = modified_date
        if parameter_values is not None:
            self.parameter_values = parameter_values

    @property
    def id(self):
        """Gets the id of this Subscription.  # noqa: E501

        A unique UUID value that specifies the identifier by which this Subscription can be referenced in requests or in other defined objects.  # noqa: E501

        :return: The id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        A unique UUID value that specifies the identifier by which this Subscription can be referenced in requests or in other defined objects.  # noqa: E501

        :param id: The id of this Subscription.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def owner(self):
        """Gets the owner of this Subscription.  # noqa: E501

        A string value that specifies the owner of the Subscription.  # noqa: E501

        :return: The owner of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Subscription.

        A string value that specifies the owner of the Subscription.  # noqa: E501

        :param owner: The owner of this Subscription.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def is_data_driven(self):
        """Gets the is_data_driven of this Subscription.  # noqa: E501

        A boolean value that specifies whether the members of the distribution list for the subscription are computed based on data.  # noqa: E501

        :return: The is_data_driven of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._is_data_driven

    @is_data_driven.setter
    def is_data_driven(self, is_data_driven):
        """Sets the is_data_driven of this Subscription.

        A boolean value that specifies whether the members of the distribution list for the subscription are computed based on data.  # noqa: E501

        :param is_data_driven: The is_data_driven of this Subscription.  # noqa: E501
        :type: bool
        """

        self._is_data_driven = is_data_driven

    @property
    def description(self):
        """Gets the description of this Subscription.  # noqa: E501

        A string value that contains descriptive text about the Subscription.  # noqa: E501

        :return: The description of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Subscription.

        A string value that contains descriptive text about the Subscription.  # noqa: E501

        :param description: The description of this Subscription.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def report(self):
        """Gets the report of this Subscription.  # noqa: E501

        A string value that specifies the path of the report for this Subscription.  # noqa: E501

        :return: The report of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this Subscription.

        A string value that specifies the path of the report for this Subscription.  # noqa: E501

        :param report: The report of this Subscription.  # noqa: E501
        :type: str
        """

        self._report = report

    @property
    def is_active(self):
        """Gets the is_active of this Subscription.  # noqa: E501

        A boolean value that specifies whether the Subscription is currently active.  # noqa: E501

        :return: The is_active of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Subscription.

        A boolean value that specifies whether the Subscription is currently active.  # noqa: E501

        :param is_active: The is_active of this Subscription.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def event_type(self):
        """Gets the event_type of this Subscription.  # noqa: E501

        A string specifying the type of event that triggers the Subscription.  # noqa: E501

        :return: The event_type of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Subscription.

        A string specifying the type of event that triggers the Subscription.  # noqa: E501

        :param event_type: The event_type of this Subscription.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def schedule_description(self):
        """Gets the schedule_description of this Subscription.  # noqa: E501

        A string value that contains descriptive text about the schedule referenced in the Schedule property.  # noqa: E501

        :return: The schedule_description of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._schedule_description

    @schedule_description.setter
    def schedule_description(self, schedule_description):
        """Sets the schedule_description of this Subscription.

        A string value that contains descriptive text about the schedule referenced in the Schedule property.  # noqa: E501

        :param schedule_description: The schedule_description of this Subscription.  # noqa: E501
        :type: str
        """

        self._schedule_description = schedule_description

    @property
    def last_run_time(self):
        """Gets the last_run_time of this Subscription.  # noqa: E501

        A string value that contains the date-time that the schedule was last run.  # noqa: E501

        :return: The last_run_time of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._last_run_time

    @last_run_time.setter
    def last_run_time(self, last_run_time):
        """Sets the last_run_time of this Subscription.

        A string value that contains the date-time that the schedule was last run.  # noqa: E501

        :param last_run_time: The last_run_time of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._last_run_time = last_run_time

    @property
    def last_status(self):
        """Gets the last_status of this Subscription.  # noqa: E501

        A string specifying the Status of the last run.  # noqa: E501

        :return: The last_status of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):
        """Sets the last_status of this Subscription.

        A string specifying the Status of the last run.  # noqa: E501

        :param last_status: The last_status of this Subscription.  # noqa: E501
        :type: str
        """

        self._last_status = last_status

    @property
    def extension_settings(self):
        """Gets the extension_settings of this Subscription.  # noqa: E501


        :return: The extension_settings of this Subscription.  # noqa: E501
        :rtype: ExtensionSettings
        """
        return self._extension_settings

    @extension_settings.setter
    def extension_settings(self, extension_settings):
        """Sets the extension_settings of this Subscription.


        :param extension_settings: The extension_settings of this Subscription.  # noqa: E501
        :type: ExtensionSettings
        """

        self._extension_settings = extension_settings

    @property
    def delivery_extension(self):
        """Gets the delivery_extension of this Subscription.  # noqa: E501

        An object that specifies the DeliveryExtension that will be used with this Schedule's report delivery.  # noqa: E501

        :return: The delivery_extension of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._delivery_extension

    @delivery_extension.setter
    def delivery_extension(self, delivery_extension):
        """Sets the delivery_extension of this Subscription.

        An object that specifies the DeliveryExtension that will be used with this Schedule's report delivery.  # noqa: E501

        :param delivery_extension: The delivery_extension of this Subscription.  # noqa: E501
        :type: str
        """

        self._delivery_extension = delivery_extension

    @property
    def localized_delivery_extension_name(self):
        """Gets the localized_delivery_extension_name of this Subscription.  # noqa: E501

        Localized version of extension name when available.  # noqa: E501

        :return: The localized_delivery_extension_name of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._localized_delivery_extension_name

    @localized_delivery_extension_name.setter
    def localized_delivery_extension_name(self, localized_delivery_extension_name):
        """Sets the localized_delivery_extension_name of this Subscription.

        Localized version of extension name when available.  # noqa: E501

        :param localized_delivery_extension_name: The localized_delivery_extension_name of this Subscription.  # noqa: E501
        :type: str
        """

        self._localized_delivery_extension_name = localized_delivery_extension_name

    @property
    def modified_by(self):
        """Gets the modified_by of this Subscription.  # noqa: E501

        A string value that contains the network user name of the last user to modify the subscription.  # noqa: E501

        :return: The modified_by of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Subscription.

        A string value that contains the network user name of the last user to modify the subscription.  # noqa: E501

        :param modified_by: The modified_by of this Subscription.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def modified_date(self):
        """Gets the modified_date of this Subscription.  # noqa: E501

        A string value that contains the date-time of the last modification to the subscription.  # noqa: E501

        :return: The modified_date of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Subscription.

        A string value that contains the date-time of the last modification to the subscription.  # noqa: E501

        :param modified_date: The modified_date of this Subscription.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def parameter_values(self):
        """Gets the parameter_values of this Subscription.  # noqa: E501

        An array of items of type ParameterValue that specify the parameter values for the subscription.  # noqa: E501

        :return: The parameter_values of this Subscription.  # noqa: E501
        :rtype: list[ParameterValue]
        """
        return self._parameter_values

    @parameter_values.setter
    def parameter_values(self, parameter_values):
        """Sets the parameter_values of this Subscription.

        An array of items of type ParameterValue that specify the parameter values for the subscription.  # noqa: E501

        :param parameter_values: The parameter_values of this Subscription.  # noqa: E501
        :type: list[ParameterValue]
        """

        self._parameter_values = parameter_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Subscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Subscription):
            return True

        return self.to_dict() != other.to_dict()
