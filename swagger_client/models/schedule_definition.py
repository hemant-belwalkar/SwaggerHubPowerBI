# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ScheduleDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date_time': 'datetime',
        'end_date': 'datetime',
        'end_date_specified': 'bool',
        'recurrence': 'ScheduleRecurrence'
    }

    attribute_map = {
        'start_date_time': 'StartDateTime',
        'end_date': 'EndDate',
        'end_date_specified': 'EndDateSpecified',
        'recurrence': 'Recurrence'
    }

    def __init__(self, start_date_time=None, end_date=None, end_date_specified=None, recurrence=None, _configuration=None):  # noqa: E501
        """ScheduleDefinition - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._start_date_time = None
        self._end_date = None
        self._end_date_specified = None
        self._recurrence = None
        self.discriminator = None

        if start_date_time is not None:
            self.start_date_time = start_date_time
        if end_date is not None:
            self.end_date = end_date
        if end_date_specified is not None:
            self.end_date_specified = end_date_specified
        if recurrence is not None:
            self.recurrence = recurrence

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ScheduleDefinition.  # noqa: E501

        A string that specifies the date-time of the start of the schedule.  # noqa: E501

        :return: The start_date_time of this ScheduleDefinition.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ScheduleDefinition.

        A string that specifies the date-time of the start of the schedule.  # noqa: E501

        :param start_date_time: The start_date_time of this ScheduleDefinition.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def end_date(self):
        """Gets the end_date of this ScheduleDefinition.  # noqa: E501

        A string that specifies the date-time of the end of the schedule.  # noqa: E501

        :return: The end_date of this ScheduleDefinition.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ScheduleDefinition.

        A string that specifies the date-time of the end of the schedule.  # noqa: E501

        :param end_date: The end_date of this ScheduleDefinition.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def end_date_specified(self):
        """Gets the end_date_specified of this ScheduleDefinition.  # noqa: E501

        A boolean value that indicates whether the schedule end is specified.  # noqa: E501

        :return: The end_date_specified of this ScheduleDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._end_date_specified

    @end_date_specified.setter
    def end_date_specified(self, end_date_specified):
        """Sets the end_date_specified of this ScheduleDefinition.

        A boolean value that indicates whether the schedule end is specified.  # noqa: E501

        :param end_date_specified: The end_date_specified of this ScheduleDefinition.  # noqa: E501
        :type: bool
        """

        self._end_date_specified = end_date_specified

    @property
    def recurrence(self):
        """Gets the recurrence of this ScheduleDefinition.  # noqa: E501


        :return: The recurrence of this ScheduleDefinition.  # noqa: E501
        :rtype: ScheduleRecurrence
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this ScheduleDefinition.


        :param recurrence: The recurrence of this ScheduleDefinition.  # noqa: E501
        :type: ScheduleRecurrence
        """

        self._recurrence = recurrence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScheduleDefinition):
            return True

        return self.to_dict() != other.to_dict()
