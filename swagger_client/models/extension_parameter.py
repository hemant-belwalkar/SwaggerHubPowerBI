# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ExtensionParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'required': 'bool',
        'read_only': 'bool',
        'value': 'str',
        'error': 'str',
        'encrypted': 'bool',
        'is_password': 'bool',
        'valid_values': 'list[ValidValue]',
        'valid_values_is_null': 'bool'
    }

    attribute_map = {
        'name': 'Name',
        'display_name': 'DisplayName',
        'required': 'Required',
        'read_only': 'ReadOnly',
        'value': 'Value',
        'error': 'Error',
        'encrypted': 'Encrypted',
        'is_password': 'IsPassword',
        'valid_values': 'ValidValues',
        'valid_values_is_null': 'ValidValuesIsNull'
    }

    def __init__(self, name=None, display_name=None, required=None, read_only=None, value=None, error=None, encrypted=None, is_password=None, valid_values=None, valid_values_is_null=None, _configuration=None):  # noqa: E501
        """ExtensionParameter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._display_name = None
        self._required = None
        self._read_only = None
        self._value = None
        self._error = None
        self._encrypted = None
        self._is_password = None
        self._valid_values = None
        self._valid_values_is_null = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if required is not None:
            self.required = required
        if read_only is not None:
            self.read_only = read_only
        if value is not None:
            self.value = value
        if error is not None:
            self.error = error
        if encrypted is not None:
            self.encrypted = encrypted
        if is_password is not None:
            self.is_password = is_password
        if valid_values is not None:
            self.valid_values = valid_values
        if valid_values_is_null is not None:
            self.valid_values_is_null = valid_values_is_null

    @property
    def name(self):
        """Gets the name of this ExtensionParameter.  # noqa: E501

        A string value that specifies the name for the ExtensionParameter.  # noqa: E501

        :return: The name of this ExtensionParameter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExtensionParameter.

        A string value that specifies the name for the ExtensionParameter.  # noqa: E501

        :param name: The name of this ExtensionParameter.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this ExtensionParameter.  # noqa: E501

        The name of the extension setting that is displayed to the user.  # noqa: E501

        :return: The display_name of this ExtensionParameter.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ExtensionParameter.

        The name of the extension setting that is displayed to the user.  # noqa: E501

        :param display_name: The display_name of this ExtensionParameter.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def required(self):
        """Gets the required of this ExtensionParameter.  # noqa: E501

        Indicates whether the value is required.  # noqa: E501

        :return: The required of this ExtensionParameter.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ExtensionParameter.

        Indicates whether the value is required.  # noqa: E501

        :param required: The required of this ExtensionParameter.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def read_only(self):
        """Gets the read_only of this ExtensionParameter.  # noqa: E501

        Indicates whether the setting is read-only.  # noqa: E501

        :return: The read_only of this ExtensionParameter.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ExtensionParameter.

        Indicates whether the setting is read-only.  # noqa: E501

        :param read_only: The read_only of this ExtensionParameter.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def value(self):
        """Gets the value of this ExtensionParameter.  # noqa: E501

        A string that represents the value of an extension parameter.  # noqa: E501

        :return: The value of this ExtensionParameter.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ExtensionParameter.

        A string that represents the value of an extension parameter.  # noqa: E501

        :param value: The value of this ExtensionParameter.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def error(self):
        """Gets the error of this ExtensionParameter.  # noqa: E501

        An error that describes a problem with the value of the setting.  # noqa: E501

        :return: The error of this ExtensionParameter.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ExtensionParameter.

        An error that describes a problem with the value of the setting.  # noqa: E501

        :param error: The error of this ExtensionParameter.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def encrypted(self):
        """Gets the encrypted of this ExtensionParameter.  # noqa: E501

        Indicates whether the extension parameter value should be encrypted in the Report Server database.  # noqa: E501

        :return: The encrypted of this ExtensionParameter.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this ExtensionParameter.

        Indicates whether the extension parameter value should be encrypted in the Report Server database.  # noqa: E501

        :param encrypted: The encrypted of this ExtensionParameter.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def is_password(self):
        """Gets the is_password of this ExtensionParameter.  # noqa: E501

        A Boolean value that indicates whether the ExtensionParameter is a password.  # noqa: E501

        :return: The is_password of this ExtensionParameter.  # noqa: E501
        :rtype: bool
        """
        return self._is_password

    @is_password.setter
    def is_password(self, is_password):
        """Sets the is_password of this ExtensionParameter.

        A Boolean value that indicates whether the ExtensionParameter is a password.  # noqa: E501

        :param is_password: The is_password of this ExtensionParameter.  # noqa: E501
        :type: bool
        """

        self._is_password = is_password

    @property
    def valid_values(self):
        """Gets the valid_values of this ExtensionParameter.  # noqa: E501

        A set of values that can be configured for the setting.  # noqa: E501

        :return: The valid_values of this ExtensionParameter.  # noqa: E501
        :rtype: list[ValidValue]
        """
        return self._valid_values

    @valid_values.setter
    def valid_values(self, valid_values):
        """Sets the valid_values of this ExtensionParameter.

        A set of values that can be configured for the setting.  # noqa: E501

        :param valid_values: The valid_values of this ExtensionParameter.  # noqa: E501
        :type: list[ValidValue]
        """

        self._valid_values = valid_values

    @property
    def valid_values_is_null(self):
        """Gets the valid_values_is_null of this ExtensionParameter.  # noqa: E501

        A Boolean value that indicates whether the ValidValues property is null.  # noqa: E501

        :return: The valid_values_is_null of this ExtensionParameter.  # noqa: E501
        :rtype: bool
        """
        return self._valid_values_is_null

    @valid_values_is_null.setter
    def valid_values_is_null(self, valid_values_is_null):
        """Sets the valid_values_is_null of this ExtensionParameter.

        A Boolean value that indicates whether the ValidValues property is null.  # noqa: E501

        :param valid_values_is_null: The valid_values_is_null of this ExtensionParameter.  # noqa: E501
        :type: bool
        """

        self._valid_values_is_null = valid_values_is_null

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtensionParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtensionParameter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExtensionParameter):
            return True

        return self.to_dict() != other.to_dict()
