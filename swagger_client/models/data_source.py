# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DataSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_enabled': 'bool',
        'connection_string': 'str',
        'data_model_data_source': 'DataModelDataSource',
        'data_source_sub_type': 'str',
        'data_source_type': 'str',
        'is_original_connection_string_expression_based': 'bool',
        'is_connection_string_overridden': 'bool',
        'credentials_by_user': 'CredentialsSuppliedByUser',
        'credentials_in_server': 'CredentialsStoredInServer',
        'is_reference': 'bool',
        'subscriptions': 'Subscription'
    }

    attribute_map = {
        'is_enabled': 'IsEnabled',
        'connection_string': 'ConnectionString',
        'data_model_data_source': 'DataModelDataSource',
        'data_source_sub_type': 'DataSourceSubType',
        'data_source_type': 'DataSourceType',
        'is_original_connection_string_expression_based': 'IsOriginalConnectionStringExpressionBased',
        'is_connection_string_overridden': 'IsConnectionStringOverridden',
        'credentials_by_user': 'CredentialsByUser',
        'credentials_in_server': 'CredentialsInServer',
        'is_reference': 'IsReference',
        'subscriptions': 'Subscriptions'
    }

    def __init__(self, is_enabled=None, connection_string=None, data_model_data_source=None, data_source_sub_type=None, data_source_type=None, is_original_connection_string_expression_based=None, is_connection_string_overridden=None, credentials_by_user=None, credentials_in_server=None, is_reference=None, subscriptions=None, _configuration=None):  # noqa: E501
        """DataSource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_enabled = None
        self._connection_string = None
        self._data_model_data_source = None
        self._data_source_sub_type = None
        self._data_source_type = None
        self._is_original_connection_string_expression_based = None
        self._is_connection_string_overridden = None
        self._credentials_by_user = None
        self._credentials_in_server = None
        self._is_reference = None
        self._subscriptions = None
        self.discriminator = None

        if is_enabled is not None:
            self.is_enabled = is_enabled
        if connection_string is not None:
            self.connection_string = connection_string
        if data_model_data_source is not None:
            self.data_model_data_source = data_model_data_source
        if data_source_sub_type is not None:
            self.data_source_sub_type = data_source_sub_type
        if data_source_type is not None:
            self.data_source_type = data_source_type
        if is_original_connection_string_expression_based is not None:
            self.is_original_connection_string_expression_based = is_original_connection_string_expression_based
        if is_connection_string_overridden is not None:
            self.is_connection_string_overridden = is_connection_string_overridden
        if credentials_by_user is not None:
            self.credentials_by_user = credentials_by_user
        if credentials_in_server is not None:
            self.credentials_in_server = credentials_in_server
        if is_reference is not None:
            self.is_reference = is_reference
        if subscriptions is not None:
            self.subscriptions = subscriptions

    @property
    def is_enabled(self):
        """Gets the is_enabled of this DataSource.  # noqa: E501

        A Boolean value that specifies whether the DataSource is enabled for use.  # noqa: E501

        :return: The is_enabled of this DataSource.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this DataSource.

        A Boolean value that specifies whether the DataSource is enabled for use.  # noqa: E501

        :param is_enabled: The is_enabled of this DataSource.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def connection_string(self):
        """Gets the connection_string of this DataSource.  # noqa: E501

        A string value that can be passed to a data source in order to begin the process of establishing connection.  # noqa: E501

        :return: The connection_string of this DataSource.  # noqa: E501
        :rtype: str
        """
        return self._connection_string

    @connection_string.setter
    def connection_string(self, connection_string):
        """Sets the connection_string of this DataSource.

        A string value that can be passed to a data source in order to begin the process of establishing connection.  # noqa: E501

        :param connection_string: The connection_string of this DataSource.  # noqa: E501
        :type: str
        """

        self._connection_string = connection_string

    @property
    def data_model_data_source(self):
        """Gets the data_model_data_source of this DataSource.  # noqa: E501


        :return: The data_model_data_source of this DataSource.  # noqa: E501
        :rtype: DataModelDataSource
        """
        return self._data_model_data_source

    @data_model_data_source.setter
    def data_model_data_source(self, data_model_data_source):
        """Sets the data_model_data_source of this DataSource.


        :param data_model_data_source: The data_model_data_source of this DataSource.  # noqa: E501
        :type: DataModelDataSource
        """

        self._data_model_data_source = data_model_data_source

    @property
    def data_source_sub_type(self):
        """Gets the data_source_sub_type of this DataSource.  # noqa: E501

        Subtype of the datasource type. Applies to PowerBIReports. Ignored when used with DataSets, LinkedReports, and Reports.  # noqa: E501

        :return: The data_source_sub_type of this DataSource.  # noqa: E501
        :rtype: str
        """
        return self._data_source_sub_type

    @data_source_sub_type.setter
    def data_source_sub_type(self, data_source_sub_type):
        """Sets the data_source_sub_type of this DataSource.

        Subtype of the datasource type. Applies to PowerBIReports. Ignored when used with DataSets, LinkedReports, and Reports.  # noqa: E501

        :param data_source_sub_type: The data_source_sub_type of this DataSource.  # noqa: E501
        :type: str
        """

        self._data_source_sub_type = data_source_sub_type

    @property
    def data_source_type(self):
        """Gets the data_source_type of this DataSource.  # noqa: E501

        DataSource extension such as 'SQL'. Applies to DataSets, LinkedReports, and Reports. Ignored when used with PowerBIReports. For PowerBIReports, use DataSourceSubType = DataModel and DataModelDataSource.Type.  # noqa: E501

        :return: The data_source_type of this DataSource.  # noqa: E501
        :rtype: str
        """
        return self._data_source_type

    @data_source_type.setter
    def data_source_type(self, data_source_type):
        """Sets the data_source_type of this DataSource.

        DataSource extension such as 'SQL'. Applies to DataSets, LinkedReports, and Reports. Ignored when used with PowerBIReports. For PowerBIReports, use DataSourceSubType = DataModel and DataModelDataSource.Type.  # noqa: E501

        :param data_source_type: The data_source_type of this DataSource.  # noqa: E501
        :type: str
        """

        self._data_source_type = data_source_type

    @property
    def is_original_connection_string_expression_based(self):
        """Gets the is_original_connection_string_expression_based of this DataSource.  # noqa: E501

        Indicates whether the original connection string for the datasource was expression-based. Applies to DataSets, LinkedReports, and Reports. Ignored when used with PowerBIReports.  # noqa: E501

        :return: The is_original_connection_string_expression_based of this DataSource.  # noqa: E501
        :rtype: bool
        """
        return self._is_original_connection_string_expression_based

    @is_original_connection_string_expression_based.setter
    def is_original_connection_string_expression_based(self, is_original_connection_string_expression_based):
        """Sets the is_original_connection_string_expression_based of this DataSource.

        Indicates whether the original connection string for the datasource was expression-based. Applies to DataSets, LinkedReports, and Reports. Ignored when used with PowerBIReports.  # noqa: E501

        :param is_original_connection_string_expression_based: The is_original_connection_string_expression_based of this DataSource.  # noqa: E501
        :type: bool
        """

        self._is_original_connection_string_expression_based = is_original_connection_string_expression_based

    @property
    def is_connection_string_overridden(self):
        """Gets the is_connection_string_overridden of this DataSource.  # noqa: E501

        Specifies whether the original connection string is overridden. Applies to DataSets, LinkedReports, and Reports. Ignored when used with PowerBIReports.  # noqa: E501

        :return: The is_connection_string_overridden of this DataSource.  # noqa: E501
        :rtype: bool
        """
        return self._is_connection_string_overridden

    @is_connection_string_overridden.setter
    def is_connection_string_overridden(self, is_connection_string_overridden):
        """Sets the is_connection_string_overridden of this DataSource.

        Specifies whether the original connection string is overridden. Applies to DataSets, LinkedReports, and Reports. Ignored when used with PowerBIReports.  # noqa: E501

        :param is_connection_string_overridden: The is_connection_string_overridden of this DataSource.  # noqa: E501
        :type: bool
        """

        self._is_connection_string_overridden = is_connection_string_overridden

    @property
    def credentials_by_user(self):
        """Gets the credentials_by_user of this DataSource.  # noqa: E501


        :return: The credentials_by_user of this DataSource.  # noqa: E501
        :rtype: CredentialsSuppliedByUser
        """
        return self._credentials_by_user

    @credentials_by_user.setter
    def credentials_by_user(self, credentials_by_user):
        """Sets the credentials_by_user of this DataSource.


        :param credentials_by_user: The credentials_by_user of this DataSource.  # noqa: E501
        :type: CredentialsSuppliedByUser
        """

        self._credentials_by_user = credentials_by_user

    @property
    def credentials_in_server(self):
        """Gets the credentials_in_server of this DataSource.  # noqa: E501


        :return: The credentials_in_server of this DataSource.  # noqa: E501
        :rtype: CredentialsStoredInServer
        """
        return self._credentials_in_server

    @credentials_in_server.setter
    def credentials_in_server(self, credentials_in_server):
        """Sets the credentials_in_server of this DataSource.


        :param credentials_in_server: The credentials_in_server of this DataSource.  # noqa: E501
        :type: CredentialsStoredInServer
        """

        self._credentials_in_server = credentials_in_server

    @property
    def is_reference(self):
        """Gets the is_reference of this DataSource.  # noqa: E501

        Indicates whether this is a reference to a shared data source or an embedded data source. Applies to DataSets, LinkedReports, and Reports. Ignored when used with PowerBIReports.  # noqa: E501

        :return: The is_reference of this DataSource.  # noqa: E501
        :rtype: bool
        """
        return self._is_reference

    @is_reference.setter
    def is_reference(self, is_reference):
        """Sets the is_reference of this DataSource.

        Indicates whether this is a reference to a shared data source or an embedded data source. Applies to DataSets, LinkedReports, and Reports. Ignored when used with PowerBIReports.  # noqa: E501

        :param is_reference: The is_reference of this DataSource.  # noqa: E501
        :type: bool
        """

        self._is_reference = is_reference

    @property
    def subscriptions(self):
        """Gets the subscriptions of this DataSource.  # noqa: E501


        :return: The subscriptions of this DataSource.  # noqa: E501
        :rtype: Subscription
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this DataSource.


        :param subscriptions: The subscriptions of this DataSource.  # noqa: E501
        :type: Subscription
        """

        self._subscriptions = subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataSource):
            return True

        return self.to_dict() != other.to_dict()
