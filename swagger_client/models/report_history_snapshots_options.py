# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ReportHistorySnapshotsOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'manual_creation_enabled': 'bool',
        'keep_execution_snapshots': 'bool',
        'use_default_system_limit': 'bool',
        'scoped_limit': 'int',
        'system_limit': 'int',
        'schedule': 'ReportHistorySnapshotsOptionsSchedule'
    }

    attribute_map = {
        'manual_creation_enabled': 'ManualCreationEnabled',
        'keep_execution_snapshots': 'KeepExecutionSnapshots',
        'use_default_system_limit': 'UseDefaultSystemLimit',
        'scoped_limit': 'ScopedLimit',
        'system_limit': 'SystemLimit',
        'schedule': 'Schedule'
    }

    def __init__(self, manual_creation_enabled=None, keep_execution_snapshots=None, use_default_system_limit=None, scoped_limit=None, system_limit=None, schedule=None, _configuration=None):  # noqa: E501
        """ReportHistorySnapshotsOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._manual_creation_enabled = None
        self._keep_execution_snapshots = None
        self._use_default_system_limit = None
        self._scoped_limit = None
        self._system_limit = None
        self._schedule = None
        self.discriminator = None

        if manual_creation_enabled is not None:
            self.manual_creation_enabled = manual_creation_enabled
        if keep_execution_snapshots is not None:
            self.keep_execution_snapshots = keep_execution_snapshots
        if use_default_system_limit is not None:
            self.use_default_system_limit = use_default_system_limit
        if scoped_limit is not None:
            self.scoped_limit = scoped_limit
        if system_limit is not None:
            self.system_limit = system_limit
        if schedule is not None:
            self.schedule = schedule

    @property
    def manual_creation_enabled(self):
        """Gets the manual_creation_enabled of this ReportHistorySnapshotsOptions.  # noqa: E501

        A boolean value that specifies whether manual snapshot creation is enabled for this HistorySnapshot.  # noqa: E501

        :return: The manual_creation_enabled of this ReportHistorySnapshotsOptions.  # noqa: E501
        :rtype: bool
        """
        return self._manual_creation_enabled

    @manual_creation_enabled.setter
    def manual_creation_enabled(self, manual_creation_enabled):
        """Sets the manual_creation_enabled of this ReportHistorySnapshotsOptions.

        A boolean value that specifies whether manual snapshot creation is enabled for this HistorySnapshot.  # noqa: E501

        :param manual_creation_enabled: The manual_creation_enabled of this ReportHistorySnapshotsOptions.  # noqa: E501
        :type: bool
        """

        self._manual_creation_enabled = manual_creation_enabled

    @property
    def keep_execution_snapshots(self):
        """Gets the keep_execution_snapshots of this ReportHistorySnapshotsOptions.  # noqa: E501

        A Boolean value that specifies whether execution snapshots are kept.  # noqa: E501

        :return: The keep_execution_snapshots of this ReportHistorySnapshotsOptions.  # noqa: E501
        :rtype: bool
        """
        return self._keep_execution_snapshots

    @keep_execution_snapshots.setter
    def keep_execution_snapshots(self, keep_execution_snapshots):
        """Sets the keep_execution_snapshots of this ReportHistorySnapshotsOptions.

        A Boolean value that specifies whether execution snapshots are kept.  # noqa: E501

        :param keep_execution_snapshots: The keep_execution_snapshots of this ReportHistorySnapshotsOptions.  # noqa: E501
        :type: bool
        """

        self._keep_execution_snapshots = keep_execution_snapshots

    @property
    def use_default_system_limit(self):
        """Gets the use_default_system_limit of this ReportHistorySnapshotsOptions.  # noqa: E501

        A boolean value that specifies whether the default system limit is used for this HistorySnapshot.  # noqa: E501

        :return: The use_default_system_limit of this ReportHistorySnapshotsOptions.  # noqa: E501
        :rtype: bool
        """
        return self._use_default_system_limit

    @use_default_system_limit.setter
    def use_default_system_limit(self, use_default_system_limit):
        """Sets the use_default_system_limit of this ReportHistorySnapshotsOptions.

        A boolean value that specifies whether the default system limit is used for this HistorySnapshot.  # noqa: E501

        :param use_default_system_limit: The use_default_system_limit of this ReportHistorySnapshotsOptions.  # noqa: E501
        :type: bool
        """

        self._use_default_system_limit = use_default_system_limit

    @property
    def scoped_limit(self):
        """Gets the scoped_limit of this ReportHistorySnapshotsOptions.  # noqa: E501

        An Int32 value indicating how many snapshots to keep.  # noqa: E501

        :return: The scoped_limit of this ReportHistorySnapshotsOptions.  # noqa: E501
        :rtype: int
        """
        return self._scoped_limit

    @scoped_limit.setter
    def scoped_limit(self, scoped_limit):
        """Sets the scoped_limit of this ReportHistorySnapshotsOptions.

        An Int32 value indicating how many snapshots to keep.  # noqa: E501

        :param scoped_limit: The scoped_limit of this ReportHistorySnapshotsOptions.  # noqa: E501
        :type: int
        """

        self._scoped_limit = scoped_limit

    @property
    def system_limit(self):
        """Gets the system_limit of this ReportHistorySnapshotsOptions.  # noqa: E501

        An Int32 value indicating how many snapshots can be kept systemwide.  Default (-1) is unlimited.  # noqa: E501

        :return: The system_limit of this ReportHistorySnapshotsOptions.  # noqa: E501
        :rtype: int
        """
        return self._system_limit

    @system_limit.setter
    def system_limit(self, system_limit):
        """Sets the system_limit of this ReportHistorySnapshotsOptions.

        An Int32 value indicating how many snapshots can be kept systemwide.  Default (-1) is unlimited.  # noqa: E501

        :param system_limit: The system_limit of this ReportHistorySnapshotsOptions.  # noqa: E501
        :type: int
        """

        self._system_limit = system_limit

    @property
    def schedule(self):
        """Gets the schedule of this ReportHistorySnapshotsOptions.  # noqa: E501


        :return: The schedule of this ReportHistorySnapshotsOptions.  # noqa: E501
        :rtype: ReportHistorySnapshotsOptionsSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ReportHistorySnapshotsOptions.


        :param schedule: The schedule of this ReportHistorySnapshotsOptions.  # noqa: E501
        :type: ReportHistorySnapshotsOptionsSchedule
        """

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportHistorySnapshotsOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportHistorySnapshotsOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportHistorySnapshotsOptions):
            return True

        return self.to_dict() != other.to_dict()
