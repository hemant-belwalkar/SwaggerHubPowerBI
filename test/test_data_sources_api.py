# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.data_sources_api import DataSourcesApi  # noqa: E501
from swagger_client.rest import ApiException


class TestDataSourcesApi(unittest.TestCase):
    """DataSourcesApi unit test stubs"""

    def setUp(self):
        self.api = swagger_client.api.data_sources_api.DataSourcesApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_data_source(self):
        """Test case for add_data_source

        Creates a new DataSource CatalogItem.  # noqa: E501
        """
        pass

    def test_check_existing_data_source_connection(self):
        """Test case for check_existing_data_source_connection

        Tests the connection for a data source. This method supports the testing of published data sources that are used by reports and shared data sources  # noqa: E501
        """
        pass

    def test_check_new_data_source_connection(self):
        """Test case for check_new_data_source_connection

        Tests the connection for a data source. This method supports the direct testing of the unsaved data source.  # noqa: E501
        """
        pass

    def test_delete_data_source(self):
        """Test case for delete_data_source

        Deletes the specified DataSource.  # noqa: E501
        """
        pass

    def test_get_data_source(self):
        """Test case for get_data_source

        Gets a DataSource CatalogItem specified by the Id.  # noqa: E501
        """
        pass

    def test_get_data_source_allowed_actions(self):
        """Test case for get_data_source_allowed_actions

        Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.  # noqa: E501
        """
        pass

    def test_get_data_source_content(self):
        """Test case for get_data_source_content

        Gets the content of the DataSource CatalogItem specified by the Id.  # noqa: E501
        """
        pass

    def test_get_data_source_dependent_items(self):
        """Test case for get_data_source_dependent_items

        Returns a list of CatalogItems that reference the DataSource specified by the Id.  # noqa: E501
        """
        pass

    def test_get_data_source_policies(self):
        """Test case for get_data_source_policies

        Gets ItemPolicies associated with the DataSource specified by the Id.  # noqa: E501
        """
        pass

    def test_get_data_source_query_fields(self):
        """Test case for get_data_source_query_fields

        Retrieves a dataset that contains the fields retrieved by the delivery query for a data-driven subscription.  # noqa: E501
        """
        pass

    def test_get_data_sources(self):
        """Test case for get_data_sources

        Gets an array of DataSource CatalogItems.  # noqa: E501
        """
        pass

    def test_get_datasource_properties(self):
        """Test case for get_datasource_properties

        Gets DataSource Properties (takes list of property names to retrieve the values)  # noqa: E501
        """
        pass

    def test_set_data_source_policies(self):
        """Test case for set_data_source_policies

        Replaces ItemPolicies associated with the DataSource specified by the Id.  # noqa: E501
        """
        pass

    def test_update_data_source(self):
        """Test case for update_data_source

        Updates the DataSource CatalogItem specified by the Id using the provided definition.  # noqa: E501
        """
        pass

    def test_update_datasource_properties(self):
        """Test case for update_datasource_properties

        Updates the DataSource Properties included in the given list.  # noqa: E501
        """
        pass

    def test_upload_data_source(self):
        """Test case for upload_data_source

        Does an efficient binary upload of a new or existing DataSource CatalogItem from a multipart/form-data request. Use of this API is recommended for files larger than 25 MB in size.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
