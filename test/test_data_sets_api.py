# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.data_sets_api import DataSetsApi  # noqa: E501
from swagger_client.rest import ApiException


class TestDataSetsApi(unittest.TestCase):
    """DataSetsApi unit test stubs"""

    def setUp(self):
        self.api = swagger_client.api.data_sets_api.DataSetsApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_data_set(self):
        """Test case for add_data_set

        Creates a new DataSet CatalogItem.  # noqa: E501
        """
        pass

    def test_delete_data_set(self):
        """Test case for delete_data_set

        Deletes the specified DataSet.  # noqa: E501
        """
        pass

    def test_get_data_set(self):
        """Test case for get_data_set

        Gets a DataSet CatalogItem specified by the Id.  # noqa: E501
        """
        pass

    def test_get_data_set_aggregated_value(self):
        """Test case for get_data_set_aggregated_value

        Gets the value for the specified DataSet column using the given aggregation type.  # noqa: E501
        """
        pass

    def test_get_data_set_allowed_actions(self):
        """Test case for get_data_set_allowed_actions

        Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.  # noqa: E501
        """
        pass

    def test_get_data_set_cache_options(self):
        """Test case for get_data_set_cache_options

        Gets the CacheOption's content for a given DataSet.  # noqa: E501
        """
        pass

    def test_get_data_set_cache_refresh_plans(self):
        """Test case for get_data_set_cache_refresh_plans

        Gets the CacheRefreshPlans for a given DataSet.  # noqa: E501
        """
        pass

    def test_get_data_set_content(self):
        """Test case for get_data_set_content

        Gets the content of the specified DataSet CatalogItem specified by the Id.  # noqa: E501
        """
        pass

    def test_get_data_set_data(self):
        """Test case for get_data_set_data

        Gets the query results for the specified DataSet.  # noqa: E501
        """
        pass

    def test_get_data_set_data_source(self):
        """Test case for get_data_set_data_source

        Gets the DataSource specified by the DataSourceId that is associated with the DataSet.  # noqa: E501
        """
        pass

    def test_get_data_set_data_sources(self):
        """Test case for get_data_set_data_sources

        Gets the DataSources associated with the specified DataSet.  # noqa: E501
        """
        pass

    def test_get_data_set_dependent_items(self):
        """Test case for get_data_set_dependent_items

        Returns a list of CatalogItems that reference the specified DataSet.  # noqa: E501
        """
        pass

    def test_get_data_set_o_data_feed(self):
        """Test case for get_data_set_o_data_feed

        Gets the data for a given DataSet. With the exception of the ID property, columns that are defined in the DataSet will be returned as open or dynamic types in the result.  # noqa: E501
        """
        pass

    def test_get_data_set_parameter_definitions(self):
        """Test case for get_data_set_parameter_definitions

        Gets the ParameterDefinitions associated with the specified DataSet.  # noqa: E501
        """
        pass

    def test_get_data_set_policies(self):
        """Test case for get_data_set_policies

        Gets ItemPolicies associated with the specified DataSet CatalogItem.  # noqa: E501
        """
        pass

    def test_get_data_set_schema(self):
        """Test case for get_data_set_schema

        Gets the schema for the specified DataSet.  # noqa: E501
        """
        pass

    def test_get_data_sets(self):
        """Test case for get_data_sets

        Gets an array of DataSet CatalogItems.  # noqa: E501
        """
        pass

    def test_get_dataset_properties(self):
        """Test case for get_dataset_properties

        Gets DataSet Properties (takes list of property names to retrieve the values)  # noqa: E501
        """
        pass

    def test_set_data_set_cache_options(self):
        """Test case for set_data_set_cache_options

        Replaces the CacheOption's content for a given DataSet using the provided definition.  # noqa: E501
        """
        pass

    def test_set_data_set_data_source(self):
        """Test case for set_data_set_data_source

        Updates the DataSource specified by the DataSourceId that is associated with the DataSet.  # noqa: E501
        """
        pass

    def test_set_data_set_data_sources(self):
        """Test case for set_data_set_data_sources

        Updates the DataSource definition associated with the specified DataSet.  # noqa: E501
        """
        pass

    def test_set_data_set_policies(self):
        """Test case for set_data_set_policies

        Replaces ItemPolicies associated with the specified DataSet item.  # noqa: E501
        """
        pass

    def test_update_data_set(self):
        """Test case for update_data_set

        Updates the specified DataSet CatalogItem using the provided definition.  # noqa: E501
        """
        pass

    def test_update_data_set_parameter_definitions(self):
        """Test case for update_data_set_parameter_definitions

        Updates the ParameterDefinitions associated with the DataSet specified.  # noqa: E501
        """
        pass

    def test_update_dataset_properties(self):
        """Test case for update_dataset_properties

        Updates the DataSet Properties included in the given list.  # noqa: E501
        """
        pass

    def test_upload_data_set(self):
        """Test case for upload_data_set

        Does an efficient binary upload of a new or existing DataSet CatalogItem from a multipart/form-data request. Use of this API is recommended for files larger than 25 MB in size.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
