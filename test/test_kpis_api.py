# coding: utf-8

"""
    Power BI Report Server REST API

    The Power BI Report Server REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Since Power BI Report Server is a superset of SQL Server Reporting Services, the Power BI Report Server REST API is a superset of the  [SQL Server Reporting Services REST API](https://app.swaggerhub.com/apis/microsoft-rs/SSRS/2.0).  __Power BI Report Server API Additions__ * October 2020 Release   * /PowerBIReports({Id})/DataModelParameters(GET & POST)  * January 2019 Release   * /PowerBIReports({Id})/DataModelRoles (GET)   * /PowerBIReports({Id})/DataModelRoleAssignments (GET & PUT)  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://powerbi.microsoft.com/documentation/reportserver-developer-handbook-overview/  __Team Blog:__  https://powerbi.microsoft.com/blog/  __Support forums:__  https://community.powerbi.com/t5/Report-Server/bd-p/ReportServer   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.kpis_api import KpisApi  # noqa: E501
from swagger_client.rest import ApiException


class TestKpisApi(unittest.TestCase):
    """KpisApi unit test stubs"""

    def setUp(self):
        self.api = swagger_client.api.kpis_api.KpisApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_kpi(self):
        """Test case for add_kpi

        Creates a new Kpi CatalogItem.  # noqa: E501
        """
        pass

    def test_delete_kpi(self):
        """Test case for delete_kpi

        Deletes the specified Kpi.  # noqa: E501
        """
        pass

    def test_get_kpi(self):
        """Test case for get_kpi

        Gets a Kpi CatalogItem specified by the Id.  # noqa: E501
        """
        pass

    def test_get_kpi_allowed_actions(self):
        """Test case for get_kpi_allowed_actions

        Gets a list of actions allowed in the current session, user permissions and product edition capabilities are considered when querying.  # noqa: E501
        """
        pass

    def test_get_kpi_policies(self):
        """Test case for get_kpi_policies

        Gets ItemPolicies associated with the Kpi CatalogItem specified by the Id.  # noqa: E501
        """
        pass

    def test_get_kpi_properties(self):
        """Test case for get_kpi_properties

        Gets Kpi Properties (takes list of Property names to retrieve the values)  # noqa: E501
        """
        pass

    def test_get_kpis(self):
        """Test case for get_kpis

        Gets an array of Kpi CatalogItems.  # noqa: E501
        """
        pass

    def test_set_kpi_policies(self):
        """Test case for set_kpi_policies

        Replaces ItemPolicies associated with the Kpi specified by the Id.  # noqa: E501
        """
        pass

    def test_update_kpi(self):
        """Test case for update_kpi

        Updates the specified Kpi CatalogItem using the provided definition.  # noqa: E501
        """
        pass

    def test_update_kpi_properties(self):
        """Test case for update_kpi_properties

        Updates the Kpi Properties included in the given list.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
